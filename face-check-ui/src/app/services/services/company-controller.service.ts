/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { calculateTaxes } from '../fn/company-controller/calculate-taxes';
import { CalculateTaxes$Params } from '../fn/company-controller/calculate-taxes';
import { CompanyIncomePerMonthResponse } from '../models/company-income-per-month-response';
import { CompanyTaxCalculationResponse } from '../models/company-tax-calculation-response';
import { CompanyUpdatingResponse } from '../models/company-updating-response';
import { deleteCompany } from '../fn/company-controller/delete-company';
import { DeleteCompany$Params } from '../fn/company-controller/delete-company';
import { demoteFromAdminToForeman } from '../fn/company-controller/demote-from-admin-to-foreman';
import { DemoteFromAdminToForeman$Params } from '../fn/company-controller/demote-from-admin-to-foreman';
import { demoteFromForemanToUser } from '../fn/company-controller/demote-from-foreman-to-user';
import { DemoteFromForemanToUser$Params } from '../fn/company-controller/demote-from-foreman-to-user';
import { EmployeeSalaryResponse } from '../models/employee-salary-response';
import { findCompanyIncomePerMonth } from '../fn/company-controller/find-company-income-per-month';
import { FindCompanyIncomePerMonth$Params } from '../fn/company-controller/find-company-income-per-month';
import { fireEmployee } from '../fn/company-controller/fire-employee';
import { FireEmployee$Params } from '../fn/company-controller/fire-employee';
import { getAdminEmployees } from '../fn/company-controller/get-admin-employees';
import { GetAdminEmployees$Params } from '../fn/company-controller/get-admin-employees';
import { getAllEmployeeRates } from '../fn/company-controller/get-all-employee-rates';
import { GetAllEmployeeRates$Params } from '../fn/company-controller/get-all-employee-rates';
import { getAllEmployees } from '../fn/company-controller/get-all-employees';
import { GetAllEmployees$Params } from '../fn/company-controller/get-all-employees';
import { getCompanyAddress } from '../fn/company-controller/get-company-address';
import { GetCompanyAddress$Params } from '../fn/company-controller/get-company-address';
import { getCompanyEmail } from '../fn/company-controller/get-company-email';
import { GetCompanyEmail$Params } from '../fn/company-controller/get-company-email';
import { getCompanyName } from '../fn/company-controller/get-company-name';
import { GetCompanyName$Params } from '../fn/company-controller/get-company-name';
import { getCompanyPhone } from '../fn/company-controller/get-company-phone';
import { GetCompanyPhone$Params } from '../fn/company-controller/get-company-phone';
import { getEmployeeRate } from '../fn/company-controller/get-employee-rate';
import { GetEmployeeRate$Params } from '../fn/company-controller/get-employee-rate';
import { getForemanEmployees } from '../fn/company-controller/get-foreman-employees';
import { GetForemanEmployees$Params } from '../fn/company-controller/get-foreman-employees';
import { getTotalSalaries } from '../fn/company-controller/get-total-salaries';
import { GetTotalSalaries$Params } from '../fn/company-controller/get-total-salaries';
import { getUserEmployees } from '../fn/company-controller/get-user-employees';
import { GetUserEmployees$Params } from '../fn/company-controller/get-user-employees';
import { PageResponseRelatedUserInCompanyResponse } from '../models/page-response-related-user-in-company-response';
import { promoteToAdmin } from '../fn/company-controller/promote-to-admin';
import { PromoteToAdmin$Params } from '../fn/company-controller/promote-to-admin';
import { promoteToForeman } from '../fn/company-controller/promote-to-foreman';
import { PromoteToForeman$Params } from '../fn/company-controller/promote-to-foreman';
import { setCompanyIncomePerMonth } from '../fn/company-controller/set-company-income-per-month';
import { SetCompanyIncomePerMonth$Params } from '../fn/company-controller/set-company-income-per-month';
import { updateCompany } from '../fn/company-controller/update-company';
import { UpdateCompany$Params } from '../fn/company-controller/update-company';
import { updateCompanyAddress } from '../fn/company-controller/update-company-address';
import { UpdateCompanyAddress$Params } from '../fn/company-controller/update-company-address';
import { updateCompanyEmail } from '../fn/company-controller/update-company-email';
import { UpdateCompanyEmail$Params } from '../fn/company-controller/update-company-email';
import { updateCompanyName } from '../fn/company-controller/update-company-name';
import { UpdateCompanyName$Params } from '../fn/company-controller/update-company-name';
import { updateCompanyPhone } from '../fn/company-controller/update-company-phone';
import { UpdateCompanyPhone$Params } from '../fn/company-controller/update-company-phone';
import { updateEmployeeRate } from '../fn/company-controller/update-employee-rate';
import { UpdateEmployeeRate$Params } from '../fn/company-controller/update-employee-rate';

@Injectable({ providedIn: 'root' })
export class CompanyControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateCompany()` */
  static readonly UpdateCompanyPath = '/company/{companyId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCompany()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompany$Response(params: UpdateCompany$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyUpdatingResponse>> {
    return updateCompany(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCompany$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompany(params: UpdateCompany$Params, context?: HttpContext): Observable<CompanyUpdatingResponse> {
    return this.updateCompany$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyUpdatingResponse>): CompanyUpdatingResponse => r.body)
    );
  }

  /** Path part for operation `deleteCompany()` */
  static readonly DeleteCompanyPath = '/company/{companyId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCompany()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCompany$Response(params: DeleteCompany$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCompany(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCompany$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCompany(params: DeleteCompany$Params, context?: HttpContext): Observable<void> {
    return this.deleteCompany$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findCompanyIncomePerMonth()` */
  static readonly FindCompanyIncomePerMonthPath = '/company/{companyId}/income';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findCompanyIncomePerMonth()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCompanyIncomePerMonth$Response(params: FindCompanyIncomePerMonth$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyIncomePerMonthResponse>> {
    return findCompanyIncomePerMonth(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findCompanyIncomePerMonth$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCompanyIncomePerMonth(params: FindCompanyIncomePerMonth$Params, context?: HttpContext): Observable<CompanyIncomePerMonthResponse> {
    return this.findCompanyIncomePerMonth$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyIncomePerMonthResponse>): CompanyIncomePerMonthResponse => r.body)
    );
  }

  /** Path part for operation `setCompanyIncomePerMonth()` */
  static readonly SetCompanyIncomePerMonthPath = '/company/{companyId}/income';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setCompanyIncomePerMonth()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  setCompanyIncomePerMonth$Response(params: SetCompanyIncomePerMonth$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyIncomePerMonthResponse>> {
    return setCompanyIncomePerMonth(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setCompanyIncomePerMonth$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  setCompanyIncomePerMonth(params: SetCompanyIncomePerMonth$Params, context?: HttpContext): Observable<CompanyIncomePerMonthResponse> {
    return this.setCompanyIncomePerMonth$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyIncomePerMonthResponse>): CompanyIncomePerMonthResponse => r.body)
    );
  }

  /** Path part for operation `getEmployeeRate()` */
  static readonly GetEmployeeRatePath = '/company/{companyId}/employees/{employeeId}/rate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEmployeeRate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmployeeRate$Response(params: GetEmployeeRate$Params, context?: HttpContext): Observable<StrictHttpResponse<EmployeeSalaryResponse>> {
    return getEmployeeRate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEmployeeRate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmployeeRate(params: GetEmployeeRate$Params, context?: HttpContext): Observable<EmployeeSalaryResponse> {
    return this.getEmployeeRate$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmployeeSalaryResponse>): EmployeeSalaryResponse => r.body)
    );
  }

  /** Path part for operation `updateEmployeeRate()` */
  static readonly UpdateEmployeeRatePath = '/company/{companyId}/employees/{employeeId}/rate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateEmployeeRate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEmployeeRate$Response(params: UpdateEmployeeRate$Params, context?: HttpContext): Observable<StrictHttpResponse<EmployeeSalaryResponse>> {
    return updateEmployeeRate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateEmployeeRate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEmployeeRate(params: UpdateEmployeeRate$Params, context?: HttpContext): Observable<EmployeeSalaryResponse> {
    return this.updateEmployeeRate$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmployeeSalaryResponse>): EmployeeSalaryResponse => r.body)
    );
  }

  /** Path part for operation `updateCompanyPhone()` */
  static readonly UpdateCompanyPhonePath = '/company/update-phone';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCompanyPhone()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompanyPhone$Response(params: UpdateCompanyPhone$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateCompanyPhone(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCompanyPhone$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompanyPhone(params: UpdateCompanyPhone$Params, context?: HttpContext): Observable<void> {
    return this.updateCompanyPhone$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateCompanyName()` */
  static readonly UpdateCompanyNamePath = '/company/update-name';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCompanyName()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompanyName$Response(params: UpdateCompanyName$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateCompanyName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCompanyName$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompanyName(params: UpdateCompanyName$Params, context?: HttpContext): Observable<void> {
    return this.updateCompanyName$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateCompanyEmail()` */
  static readonly UpdateCompanyEmailPath = '/company/update-email';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCompanyEmail()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompanyEmail$Response(params: UpdateCompanyEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateCompanyEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCompanyEmail$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompanyEmail(params: UpdateCompanyEmail$Params, context?: HttpContext): Observable<void> {
    return this.updateCompanyEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateCompanyAddress()` */
  static readonly UpdateCompanyAddressPath = '/company/update-address';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCompanyAddress()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompanyAddress$Response(params: UpdateCompanyAddress$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateCompanyAddress(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCompanyAddress$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompanyAddress(params: UpdateCompanyAddress$Params, context?: HttpContext): Observable<void> {
    return this.updateCompanyAddress$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `demoteFromForemanToUser()` */
  static readonly DemoteFromForemanToUserPath = '/company/demote/{workerId}/foreman-to-user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `demoteFromForemanToUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  demoteFromForemanToUser$Response(params: DemoteFromForemanToUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return demoteFromForemanToUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `demoteFromForemanToUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  demoteFromForemanToUser(params: DemoteFromForemanToUser$Params, context?: HttpContext): Observable<void> {
    return this.demoteFromForemanToUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `demoteFromAdminToForeman()` */
  static readonly DemoteFromAdminToForemanPath = '/company/demote/{workerId}/admin-to-foreman';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `demoteFromAdminToForeman()` instead.
   *
   * This method doesn't expect any request body.
   */
  demoteFromAdminToForeman$Response(params: DemoteFromAdminToForeman$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return demoteFromAdminToForeman(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `demoteFromAdminToForeman$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  demoteFromAdminToForeman(params: DemoteFromAdminToForeman$Params, context?: HttpContext): Observable<void> {
    return this.demoteFromAdminToForeman$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `calculateTaxes()` */
  static readonly CalculateTaxesPath = '/company/calculate-taxes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `calculateTaxes()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  calculateTaxes$Response(params: CalculateTaxes$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyTaxCalculationResponse>> {
    return calculateTaxes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `calculateTaxes$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  calculateTaxes(params: CalculateTaxes$Params, context?: HttpContext): Observable<CompanyTaxCalculationResponse> {
    return this.calculateTaxes$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyTaxCalculationResponse>): CompanyTaxCalculationResponse => r.body)
    );
  }

  /** Path part for operation `promoteToForeman()` */
  static readonly PromoteToForemanPath = '/company/employees/{employeeId}/promote/foreman';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `promoteToForeman()` instead.
   *
   * This method doesn't expect any request body.
   */
  promoteToForeman$Response(params: PromoteToForeman$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return promoteToForeman(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `promoteToForeman$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  promoteToForeman(params: PromoteToForeman$Params, context?: HttpContext): Observable<void> {
    return this.promoteToForeman$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `promoteToAdmin()` */
  static readonly PromoteToAdminPath = '/company/employees/{employeeId}/promote/admin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `promoteToAdmin()` instead.
   *
   * This method doesn't expect any request body.
   */
  promoteToAdmin$Response(params: PromoteToAdmin$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return promoteToAdmin(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `promoteToAdmin$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  promoteToAdmin(params: PromoteToAdmin$Params, context?: HttpContext): Observable<void> {
    return this.promoteToAdmin$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllEmployees()` */
  static readonly GetAllEmployeesPath = '/company/{companyId}/employees';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllEmployees()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEmployees$Response(params: GetAllEmployees$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseRelatedUserInCompanyResponse>> {
    return getAllEmployees(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllEmployees$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEmployees(params: GetAllEmployees$Params, context?: HttpContext): Observable<PageResponseRelatedUserInCompanyResponse> {
    return this.getAllEmployees$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseRelatedUserInCompanyResponse>): PageResponseRelatedUserInCompanyResponse => r.body)
    );
  }

  /** Path part for operation `getUserEmployees()` */
  static readonly GetUserEmployeesPath = '/company/{companyId}/employees/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserEmployees()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserEmployees$Response(params: GetUserEmployees$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseRelatedUserInCompanyResponse>> {
    return getUserEmployees(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserEmployees$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserEmployees(params: GetUserEmployees$Params, context?: HttpContext): Observable<PageResponseRelatedUserInCompanyResponse> {
    return this.getUserEmployees$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseRelatedUserInCompanyResponse>): PageResponseRelatedUserInCompanyResponse => r.body)
    );
  }

  /** Path part for operation `getForemanEmployees()` */
  static readonly GetForemanEmployeesPath = '/company/{companyId}/employees/foreman';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getForemanEmployees()` instead.
   *
   * This method doesn't expect any request body.
   */
  getForemanEmployees$Response(params: GetForemanEmployees$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseRelatedUserInCompanyResponse>> {
    return getForemanEmployees(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getForemanEmployees$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getForemanEmployees(params: GetForemanEmployees$Params, context?: HttpContext): Observable<PageResponseRelatedUserInCompanyResponse> {
    return this.getForemanEmployees$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseRelatedUserInCompanyResponse>): PageResponseRelatedUserInCompanyResponse => r.body)
    );
  }

  /** Path part for operation `getAdminEmployees()` */
  static readonly GetAdminEmployeesPath = '/company/{companyId}/employees/admins';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAdminEmployees()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAdminEmployees$Response(params: GetAdminEmployees$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseRelatedUserInCompanyResponse>> {
    return getAdminEmployees(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAdminEmployees$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAdminEmployees(params: GetAdminEmployees$Params, context?: HttpContext): Observable<PageResponseRelatedUserInCompanyResponse> {
    return this.getAdminEmployees$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseRelatedUserInCompanyResponse>): PageResponseRelatedUserInCompanyResponse => r.body)
    );
  }

  /** Path part for operation `getTotalSalaries()` */
  static readonly GetTotalSalariesPath = '/company/total-salaries';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTotalSalaries()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalSalaries$Response(params?: GetTotalSalaries$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getTotalSalaries(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTotalSalaries$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalSalaries(params?: GetTotalSalaries$Params, context?: HttpContext): Observable<number> {
    return this.getTotalSalaries$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getCompanyPhone()` */
  static readonly GetCompanyPhonePath = '/company/phone';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCompanyPhone()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompanyPhone$Response(params?: GetCompanyPhone$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getCompanyPhone(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCompanyPhone$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompanyPhone(params?: GetCompanyPhone$Params, context?: HttpContext): Observable<string> {
    return this.getCompanyPhone$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getCompanyName()` */
  static readonly GetCompanyNamePath = '/company/name';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCompanyName()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompanyName$Response(params?: GetCompanyName$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getCompanyName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCompanyName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompanyName(params?: GetCompanyName$Params, context?: HttpContext): Observable<string> {
    return this.getCompanyName$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getAllEmployeeRates()` */
  static readonly GetAllEmployeeRatesPath = '/company/employee-rates';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllEmployeeRates()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEmployeeRates$Response(params?: GetAllEmployeeRates$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EmployeeSalaryResponse>>> {
    return getAllEmployeeRates(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllEmployeeRates$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEmployeeRates(params?: GetAllEmployeeRates$Params, context?: HttpContext): Observable<Array<EmployeeSalaryResponse>> {
    return this.getAllEmployeeRates$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EmployeeSalaryResponse>>): Array<EmployeeSalaryResponse> => r.body)
    );
  }

  /** Path part for operation `getCompanyEmail()` */
  static readonly GetCompanyEmailPath = '/company/email';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCompanyEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompanyEmail$Response(params?: GetCompanyEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getCompanyEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCompanyEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompanyEmail(params?: GetCompanyEmail$Params, context?: HttpContext): Observable<string> {
    return this.getCompanyEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getCompanyAddress()` */
  static readonly GetCompanyAddressPath = '/company/address';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCompanyAddress()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompanyAddress$Response(params?: GetCompanyAddress$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getCompanyAddress(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCompanyAddress$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompanyAddress(params?: GetCompanyAddress$Params, context?: HttpContext): Observable<string> {
    return this.getCompanyAddress$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `fireEmployee()` */
  static readonly FireEmployeePath = '/company/employees/{employeeId}/fire';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `fireEmployee()` instead.
   *
   * This method doesn't expect any request body.
   */
  fireEmployee$Response(params: FireEmployee$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return fireEmployee(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `fireEmployee$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  fireEmployee(params: FireEmployee$Params, context?: HttpContext): Observable<void> {
    return this.fireEmployee$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
