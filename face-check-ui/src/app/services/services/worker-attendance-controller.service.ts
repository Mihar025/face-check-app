/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { DailyEarningResponse } from '../models/daily-earning-response';
import { FinanceInfoForWeekInFinanceScreenResponse } from '../models/finance-info-for-week-in-finance-screen-response';
import { getFinanceInfoForWeek } from '../fn/worker-attendance-controller/get-finance-info-for-week';
import { GetFinanceInfoForWeek$Params } from '../fn/worker-attendance-controller/get-finance-info-for-week';
import { getLastPunchTime } from '../fn/worker-attendance-controller/get-last-punch-time';
import { GetLastPunchTime$Params } from '../fn/worker-attendance-controller/get-last-punch-time';
import { getWeeklyEarnings } from '../fn/worker-attendance-controller/get-weekly-earnings';
import { GetWeeklyEarnings$Params } from '../fn/worker-attendance-controller/get-weekly-earnings';
import { LastPunchTimeDto } from '../models/last-punch-time-dto';
import { punchIn } from '../fn/worker-attendance-controller/punch-in';
import { PunchIn$Params } from '../fn/worker-attendance-controller/punch-in';
import { PunchInResponse } from '../models/punch-in-response';
import { punchOut } from '../fn/worker-attendance-controller/punch-out';
import { PunchOut$Params } from '../fn/worker-attendance-controller/punch-out';
import { PunchOutResponse } from '../models/punch-out-response';

@Injectable({ providedIn: 'root' })
export class WorkerAttendanceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `punchOut()` */
  static readonly PunchOutPath = '/attendance/punch-out';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `punchOut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  punchOut$Response(params: PunchOut$Params, context?: HttpContext): Observable<StrictHttpResponse<PunchOutResponse>> {
    return punchOut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `punchOut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  punchOut(params: PunchOut$Params, context?: HttpContext): Observable<PunchOutResponse> {
    return this.punchOut$Response(params, context).pipe(
      map((r: StrictHttpResponse<PunchOutResponse>): PunchOutResponse => r.body)
    );
  }

  /** Path part for operation `punchIn()` */
  static readonly PunchInPath = '/attendance/punch-in';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `punchIn()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  punchIn$Response(params: PunchIn$Params, context?: HttpContext): Observable<StrictHttpResponse<PunchInResponse>> {
    return punchIn(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `punchIn$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  punchIn(params: PunchIn$Params, context?: HttpContext): Observable<PunchInResponse> {
    return this.punchIn$Response(params, context).pipe(
      map((r: StrictHttpResponse<PunchInResponse>): PunchInResponse => r.body)
    );
  }

  /** Path part for operation `getWeeklyEarnings()` */
  static readonly GetWeeklyEarningsPath = '/attendance/week';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWeeklyEarnings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWeeklyEarnings$Response(params?: GetWeeklyEarnings$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DailyEarningResponse>>> {
    return getWeeklyEarnings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWeeklyEarnings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWeeklyEarnings(params?: GetWeeklyEarnings$Params, context?: HttpContext): Observable<Array<DailyEarningResponse>> {
    return this.getWeeklyEarnings$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DailyEarningResponse>>): Array<DailyEarningResponse> => r.body)
    );
  }

  /** Path part for operation `getLastPunchTime()` */
  static readonly GetLastPunchTimePath = '/attendance/last-punch';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLastPunchTime()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLastPunchTime$Response(params?: GetLastPunchTime$Params, context?: HttpContext): Observable<StrictHttpResponse<LastPunchTimeDto>> {
    return getLastPunchTime(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLastPunchTime$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLastPunchTime(params?: GetLastPunchTime$Params, context?: HttpContext): Observable<LastPunchTimeDto> {
    return this.getLastPunchTime$Response(params, context).pipe(
      map((r: StrictHttpResponse<LastPunchTimeDto>): LastPunchTimeDto => r.body)
    );
  }

  /** Path part for operation `getFinanceInfoForWeek()` */
  static readonly GetFinanceInfoForWeekPath = '/attendance/finance-info';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFinanceInfoForWeek()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFinanceInfoForWeek$Response(params: GetFinanceInfoForWeek$Params, context?: HttpContext): Observable<StrictHttpResponse<FinanceInfoForWeekInFinanceScreenResponse>> {
    return getFinanceInfoForWeek(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFinanceInfoForWeek$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFinanceInfoForWeek(params: GetFinanceInfoForWeek$Params, context?: HttpContext): Observable<FinanceInfoForWeekInFinanceScreenResponse> {
    return this.getFinanceInfoForWeek$Response(params, context).pipe(
      map((r: StrictHttpResponse<FinanceInfoForWeekInFinanceScreenResponse>): FinanceInfoForWeekInFinanceScreenResponse => r.body)
    );
  }

}
