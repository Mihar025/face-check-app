/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { findTotalWorkedHoursPerWeek } from '../fn/user-service-controller/find-total-worked-hours-per-week';
import { FindTotalWorkedHoursPerWeek$Params } from '../fn/user-service-controller/find-total-worked-hours-per-week';
import { findWorkerBaseHourRate } from '../fn/user-service-controller/find-worker-base-hour-rate';
import { FindWorkerBaseHourRate$Params } from '../fn/user-service-controller/find-worker-base-hour-rate';
import { findWorkerEmail } from '../fn/user-service-controller/find-worker-email';
import { FindWorkerEmail$Params } from '../fn/user-service-controller/find-worker-email';
import { findWorkerFullContactInformation } from '../fn/user-service-controller/find-worker-full-contact-information';
import { FindWorkerFullContactInformation$Params } from '../fn/user-service-controller/find-worker-full-contact-information';
import { findWorkerFullName } from '../fn/user-service-controller/find-worker-full-name';
import { FindWorkerFullName$Params } from '../fn/user-service-controller/find-worker-full-name';
import { findWorkerHomeAddress } from '../fn/user-service-controller/find-worker-home-address';
import { FindWorkerHomeAddress$Params } from '../fn/user-service-controller/find-worker-home-address';
import { findWorkerPhoneNumber } from '../fn/user-service-controller/find-worker-phone-number';
import { FindWorkerPhoneNumber$Params } from '../fn/user-service-controller/find-worker-phone-number';
import { findWorkerSalaryForSpecialMonthGross } from '../fn/user-service-controller/find-worker-salary-for-special-month-gross';
import { FindWorkerSalaryForSpecialMonthGross$Params } from '../fn/user-service-controller/find-worker-salary-for-special-month-gross';
import { findWorkerSalaryForSpecialMonthNet } from '../fn/user-service-controller/find-worker-salary-for-special-month-net';
import { FindWorkerSalaryForSpecialMonthNet$Params } from '../fn/user-service-controller/find-worker-salary-for-special-month-net';
import { findWorkerSalaryForSpecialWeekGross } from '../fn/user-service-controller/find-worker-salary-for-special-week-gross';
import { FindWorkerSalaryForSpecialWeekGross$Params } from '../fn/user-service-controller/find-worker-salary-for-special-week-gross';
import { findWorkerSalaryForSpecialWeekNet } from '../fn/user-service-controller/find-worker-salary-for-special-week-net';
import { FindWorkerSalaryForSpecialWeekNet$Params } from '../fn/user-service-controller/find-worker-salary-for-special-week-net';
import { findWorkerSalaryForSpecialYearGross } from '../fn/user-service-controller/find-worker-salary-for-special-year-gross';
import { FindWorkerSalaryForSpecialYearGross$Params } from '../fn/user-service-controller/find-worker-salary-for-special-year-gross';
import { findWorkerSalaryForSpecialYearNet } from '../fn/user-service-controller/find-worker-salary-for-special-year-net';
import { FindWorkerSalaryForSpecialYearNet$Params } from '../fn/user-service-controller/find-worker-salary-for-special-year-net';
import { findWorkerSalaryPerMonthGross } from '../fn/user-service-controller/find-worker-salary-per-month-gross';
import { FindWorkerSalaryPerMonthGross$Params } from '../fn/user-service-controller/find-worker-salary-per-month-gross';
import { findWorkerSalaryPerMonthNet } from '../fn/user-service-controller/find-worker-salary-per-month-net';
import { FindWorkerSalaryPerMonthNet$Params } from '../fn/user-service-controller/find-worker-salary-per-month-net';
import { findWorkerSalaryPerWeekGross } from '../fn/user-service-controller/find-worker-salary-per-week-gross';
import { FindWorkerSalaryPerWeekGross$Params } from '../fn/user-service-controller/find-worker-salary-per-week-gross';
import { findWorkerSalaryPerWeekNet } from '../fn/user-service-controller/find-worker-salary-per-week-net';
import { FindWorkerSalaryPerWeekNet$Params } from '../fn/user-service-controller/find-worker-salary-per-week-net';
import { findWorkerSalaryPerYearGross } from '../fn/user-service-controller/find-worker-salary-per-year-gross';
import { FindWorkerSalaryPerYearGross$Params } from '../fn/user-service-controller/find-worker-salary-per-year-gross';
import { findWorkerSalaryPerYearNet } from '../fn/user-service-controller/find-worker-salary-per-year-net';
import { FindWorkerSalaryPerYearNet$Params } from '../fn/user-service-controller/find-worker-salary-per-year-net';
import { findWorkerTotalPayedTaxesAmountForMonth } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-month';
import { FindWorkerTotalPayedTaxesAmountForMonth$Params } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-month';
import { findWorkerTotalPayedTaxesAmountForSpecialMonth } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-special-month';
import { FindWorkerTotalPayedTaxesAmountForSpecialMonth$Params } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-special-month';
import { findWorkerTotalPayedTaxesAmountForSpecialWeek } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-special-week';
import { FindWorkerTotalPayedTaxesAmountForSpecialWeek$Params } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-special-week';
import { findWorkerTotalPayedTaxesAmountForSpecialYear } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-special-year';
import { FindWorkerTotalPayedTaxesAmountForSpecialYear$Params } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-special-year';
import { findWorkerTotalPayedTaxesAmountForWeek } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-week';
import { FindWorkerTotalPayedTaxesAmountForWeek$Params } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-week';
import { findWorkerTotalPayedTaxesAmountForYear } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-year';
import { FindWorkerTotalPayedTaxesAmountForYear$Params } from '../fn/user-service-controller/find-worker-total-payed-taxes-amount-for-year';
import { updateEmail } from '../fn/user-service-controller/update-email';
import { UpdateEmail$Params } from '../fn/user-service-controller/update-email';
import { updateHomeAddress } from '../fn/user-service-controller/update-home-address';
import { UpdateHomeAddress$Params } from '../fn/user-service-controller/update-home-address';
import { updatePassword } from '../fn/user-service-controller/update-password';
import { UpdatePassword$Params } from '../fn/user-service-controller/update-password';
import { updatePhone } from '../fn/user-service-controller/update-phone';
import { UpdatePhone$Params } from '../fn/user-service-controller/update-phone';
import { UserEmailResponse } from '../models/user-email-response';
import { UserFullContactInformation } from '../models/user-full-contact-information';
import { UserFullNameResponse } from '../models/user-full-name-response';
import { UserHomeAddressResponse } from '../models/user-home-address-response';
import { UserPhoneNumberResponse } from '../models/user-phone-number-response';

@Injectable({ providedIn: 'root' })
export class UserServiceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updatePhone()` */
  static readonly UpdatePhonePath = '/user/phone/{phone}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePhone()` instead.
   *
   * This method doesn't expect any request body.
   */
  updatePhone$Response(params: UpdatePhone$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updatePhone(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePhone$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updatePhone(params: UpdatePhone$Params, context?: HttpContext): Observable<void> {
    return this.updatePhone$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updatePassword()` */
  static readonly UpdatePasswordPath = '/user/password/{password}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePassword()` instead.
   *
   * This method doesn't expect any request body.
   */
  updatePassword$Response(params: UpdatePassword$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updatePassword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePassword$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updatePassword(params: UpdatePassword$Params, context?: HttpContext): Observable<void> {
    return this.updatePassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateEmail()` */
  static readonly UpdateEmailPath = '/user/email/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateEmail$Response(params: UpdateEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateEmail(params: UpdateEmail$Params, context?: HttpContext): Observable<void> {
    return this.updateEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateHomeAddress()` */
  static readonly UpdateHomeAddressPath = '/user/address/{homeAddress}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateHomeAddress()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateHomeAddress$Response(params: UpdateHomeAddress$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateHomeAddress(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateHomeAddress$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateHomeAddress(params: UpdateHomeAddress$Params, context?: HttpContext): Observable<void> {
    return this.updateHomeAddress$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findTotalWorkedHoursPerWeek()` */
  static readonly FindTotalWorkedHoursPerWeekPath = '/user/total-hours-perWeek';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findTotalWorkedHoursPerWeek()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTotalWorkedHoursPerWeek$Response(params?: FindTotalWorkedHoursPerWeek$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findTotalWorkedHoursPerWeek(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findTotalWorkedHoursPerWeek$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTotalWorkedHoursPerWeek(params?: FindTotalWorkedHoursPerWeek$Params, context?: HttpContext): Observable<number> {
    return this.findTotalWorkedHoursPerWeek$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerTotalPayedTaxesAmountForYear()` */
  static readonly FindWorkerTotalPayedTaxesAmountForYearPath = '/user/taxes/year';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerTotalPayedTaxesAmountForYear()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForYear$Response(params?: FindWorkerTotalPayedTaxesAmountForYear$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerTotalPayedTaxesAmountForYear(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerTotalPayedTaxesAmountForYear$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForYear(params?: FindWorkerTotalPayedTaxesAmountForYear$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerTotalPayedTaxesAmountForYear$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerTotalPayedTaxesAmountForSpecialYear()` */
  static readonly FindWorkerTotalPayedTaxesAmountForSpecialYearPath = '/user/taxes/year/special';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerTotalPayedTaxesAmountForSpecialYear()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForSpecialYear$Response(params: FindWorkerTotalPayedTaxesAmountForSpecialYear$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerTotalPayedTaxesAmountForSpecialYear(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerTotalPayedTaxesAmountForSpecialYear$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForSpecialYear(params: FindWorkerTotalPayedTaxesAmountForSpecialYear$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerTotalPayedTaxesAmountForSpecialYear$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerTotalPayedTaxesAmountForWeek()` */
  static readonly FindWorkerTotalPayedTaxesAmountForWeekPath = '/user/taxes/week';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerTotalPayedTaxesAmountForWeek()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForWeek$Response(params?: FindWorkerTotalPayedTaxesAmountForWeek$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerTotalPayedTaxesAmountForWeek(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerTotalPayedTaxesAmountForWeek$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForWeek(params?: FindWorkerTotalPayedTaxesAmountForWeek$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerTotalPayedTaxesAmountForWeek$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerTotalPayedTaxesAmountForSpecialWeek()` */
  static readonly FindWorkerTotalPayedTaxesAmountForSpecialWeekPath = '/user/taxes/week/special';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerTotalPayedTaxesAmountForSpecialWeek()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForSpecialWeek$Response(params: FindWorkerTotalPayedTaxesAmountForSpecialWeek$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerTotalPayedTaxesAmountForSpecialWeek(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerTotalPayedTaxesAmountForSpecialWeek$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForSpecialWeek(params: FindWorkerTotalPayedTaxesAmountForSpecialWeek$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerTotalPayedTaxesAmountForSpecialWeek$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerTotalPayedTaxesAmountForMonth()` */
  static readonly FindWorkerTotalPayedTaxesAmountForMonthPath = '/user/taxes/month';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerTotalPayedTaxesAmountForMonth()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForMonth$Response(params?: FindWorkerTotalPayedTaxesAmountForMonth$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerTotalPayedTaxesAmountForMonth(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerTotalPayedTaxesAmountForMonth$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForMonth(params?: FindWorkerTotalPayedTaxesAmountForMonth$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerTotalPayedTaxesAmountForMonth$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerTotalPayedTaxesAmountForSpecialMonth()` */
  static readonly FindWorkerTotalPayedTaxesAmountForSpecialMonthPath = '/user/taxes/month/special';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerTotalPayedTaxesAmountForSpecialMonth()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForSpecialMonth$Response(params: FindWorkerTotalPayedTaxesAmountForSpecialMonth$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerTotalPayedTaxesAmountForSpecialMonth(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerTotalPayedTaxesAmountForSpecialMonth$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerTotalPayedTaxesAmountForSpecialMonth(params: FindWorkerTotalPayedTaxesAmountForSpecialMonth$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerTotalPayedTaxesAmountForSpecialMonth$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryPerYearNet()` */
  static readonly FindWorkerSalaryPerYearNetPath = '/user/salary/year/net';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryPerYearNet()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerYearNet$Response(params?: FindWorkerSalaryPerYearNet$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryPerYearNet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryPerYearNet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerYearNet(params?: FindWorkerSalaryPerYearNet$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryPerYearNet$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryForSpecialYearNet()` */
  static readonly FindWorkerSalaryForSpecialYearNetPath = '/user/salary/year/net/special';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryForSpecialYearNet()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialYearNet$Response(params: FindWorkerSalaryForSpecialYearNet$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryForSpecialYearNet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryForSpecialYearNet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialYearNet(params: FindWorkerSalaryForSpecialYearNet$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryForSpecialYearNet$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryPerYearGross()` */
  static readonly FindWorkerSalaryPerYearGrossPath = '/user/salary/year/gross';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryPerYearGross()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerYearGross$Response(params?: FindWorkerSalaryPerYearGross$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryPerYearGross(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryPerYearGross$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerYearGross(params?: FindWorkerSalaryPerYearGross$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryPerYearGross$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryForSpecialYearGross()` */
  static readonly FindWorkerSalaryForSpecialYearGrossPath = '/user/salary/year/gross/special';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryForSpecialYearGross()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialYearGross$Response(params: FindWorkerSalaryForSpecialYearGross$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryForSpecialYearGross(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryForSpecialYearGross$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialYearGross(params: FindWorkerSalaryForSpecialYearGross$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryForSpecialYearGross$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryPerWeekNet()` */
  static readonly FindWorkerSalaryPerWeekNetPath = '/user/salary/week/net';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryPerWeekNet()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerWeekNet$Response(params?: FindWorkerSalaryPerWeekNet$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryPerWeekNet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryPerWeekNet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerWeekNet(params?: FindWorkerSalaryPerWeekNet$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryPerWeekNet$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryForSpecialWeekNet()` */
  static readonly FindWorkerSalaryForSpecialWeekNetPath = '/user/salary/week/net/special';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryForSpecialWeekNet()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialWeekNet$Response(params: FindWorkerSalaryForSpecialWeekNet$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryForSpecialWeekNet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryForSpecialWeekNet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialWeekNet(params: FindWorkerSalaryForSpecialWeekNet$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryForSpecialWeekNet$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryPerWeekGross()` */
  static readonly FindWorkerSalaryPerWeekGrossPath = '/user/salary/week/gross';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryPerWeekGross()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerWeekGross$Response(params?: FindWorkerSalaryPerWeekGross$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryPerWeekGross(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryPerWeekGross$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerWeekGross(params?: FindWorkerSalaryPerWeekGross$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryPerWeekGross$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryForSpecialWeekGross()` */
  static readonly FindWorkerSalaryForSpecialWeekGrossPath = '/user/salary/week/gross/special';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryForSpecialWeekGross()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialWeekGross$Response(params: FindWorkerSalaryForSpecialWeekGross$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryForSpecialWeekGross(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryForSpecialWeekGross$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialWeekGross(params: FindWorkerSalaryForSpecialWeekGross$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryForSpecialWeekGross$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryPerMonthNet()` */
  static readonly FindWorkerSalaryPerMonthNetPath = '/user/salary/month/net';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryPerMonthNet()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerMonthNet$Response(params?: FindWorkerSalaryPerMonthNet$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryPerMonthNet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryPerMonthNet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerMonthNet(params?: FindWorkerSalaryPerMonthNet$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryPerMonthNet$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryForSpecialMonthNet()` */
  static readonly FindWorkerSalaryForSpecialMonthNetPath = '/user/salary/month/net/special';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryForSpecialMonthNet()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialMonthNet$Response(params: FindWorkerSalaryForSpecialMonthNet$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryForSpecialMonthNet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryForSpecialMonthNet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialMonthNet(params: FindWorkerSalaryForSpecialMonthNet$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryForSpecialMonthNet$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryPerMonthGross()` */
  static readonly FindWorkerSalaryPerMonthGrossPath = '/user/salary/month/gross';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryPerMonthGross()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerMonthGross$Response(params?: FindWorkerSalaryPerMonthGross$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryPerMonthGross(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryPerMonthGross$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryPerMonthGross(params?: FindWorkerSalaryPerMonthGross$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryPerMonthGross$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerSalaryForSpecialMonthGross()` */
  static readonly FindWorkerSalaryForSpecialMonthGrossPath = '/user/salary/month/gross/special';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerSalaryForSpecialMonthGross()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialMonthGross$Response(params: FindWorkerSalaryForSpecialMonthGross$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerSalaryForSpecialMonthGross(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerSalaryForSpecialMonthGross$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerSalaryForSpecialMonthGross(params: FindWorkerSalaryForSpecialMonthGross$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerSalaryForSpecialMonthGross$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerPhoneNumber()` */
  static readonly FindWorkerPhoneNumberPath = '/user/phone';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerPhoneNumber()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerPhoneNumber$Response(params?: FindWorkerPhoneNumber$Params, context?: HttpContext): Observable<StrictHttpResponse<UserPhoneNumberResponse>> {
    return findWorkerPhoneNumber(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerPhoneNumber$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerPhoneNumber(params?: FindWorkerPhoneNumber$Params, context?: HttpContext): Observable<UserPhoneNumberResponse> {
    return this.findWorkerPhoneNumber$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserPhoneNumberResponse>): UserPhoneNumberResponse => r.body)
    );
  }

  /** Path part for operation `findWorkerFullName()` */
  static readonly FindWorkerFullNamePath = '/user/full-name';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerFullName()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerFullName$Response(params?: FindWorkerFullName$Params, context?: HttpContext): Observable<StrictHttpResponse<UserFullNameResponse>> {
    return findWorkerFullName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerFullName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerFullName(params?: FindWorkerFullName$Params, context?: HttpContext): Observable<UserFullNameResponse> {
    return this.findWorkerFullName$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserFullNameResponse>): UserFullNameResponse => r.body)
    );
  }

  /** Path part for operation `findWorkerEmail()` */
  static readonly FindWorkerEmailPath = '/user/email';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerEmail$Response(params?: FindWorkerEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<UserEmailResponse>> {
    return findWorkerEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerEmail(params?: FindWorkerEmail$Params, context?: HttpContext): Observable<UserEmailResponse> {
    return this.findWorkerEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserEmailResponse>): UserEmailResponse => r.body)
    );
  }

  /** Path part for operation `findWorkerFullContactInformation()` */
  static readonly FindWorkerFullContactInformationPath = '/user/contact-info';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerFullContactInformation()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerFullContactInformation$Response(params?: FindWorkerFullContactInformation$Params, context?: HttpContext): Observable<StrictHttpResponse<UserFullContactInformation>> {
    return findWorkerFullContactInformation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerFullContactInformation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerFullContactInformation(params?: FindWorkerFullContactInformation$Params, context?: HttpContext): Observable<UserFullContactInformation> {
    return this.findWorkerFullContactInformation$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserFullContactInformation>): UserFullContactInformation => r.body)
    );
  }

  /** Path part for operation `findWorkerBaseHourRate()` */
  static readonly FindWorkerBaseHourRatePath = '/user/base-rate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerBaseHourRate()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerBaseHourRate$Response(params?: FindWorkerBaseHourRate$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return findWorkerBaseHourRate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerBaseHourRate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerBaseHourRate(params?: FindWorkerBaseHourRate$Params, context?: HttpContext): Observable<number> {
    return this.findWorkerBaseHourRate$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findWorkerHomeAddress()` */
  static readonly FindWorkerHomeAddressPath = '/user/address';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWorkerHomeAddress()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerHomeAddress$Response(params?: FindWorkerHomeAddress$Params, context?: HttpContext): Observable<StrictHttpResponse<UserHomeAddressResponse>> {
    return findWorkerHomeAddress(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWorkerHomeAddress$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWorkerHomeAddress(params?: FindWorkerHomeAddress$Params, context?: HttpContext): Observable<UserHomeAddressResponse> {
    return this.findWorkerHomeAddress$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserHomeAddressResponse>): UserHomeAddressResponse => r.body)
    );
  }

}
