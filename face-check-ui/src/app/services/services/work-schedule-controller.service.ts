/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getCurrentWeekHours } from '../fn/work-schedule-controller/get-current-week-hours';
import { GetCurrentWeekHours$Params } from '../fn/work-schedule-controller/get-current-week-hours';
import { getSpecialWeekHours } from '../fn/work-schedule-controller/get-special-week-hours';
import { GetSpecialWeekHours$Params } from '../fn/work-schedule-controller/get-special-week-hours';
import { getWeekSchedule } from '../fn/work-schedule-controller/get-week-schedule';
import { GetWeekSchedule$Params } from '../fn/work-schedule-controller/get-week-schedule';
import { setWorkerSchedule } from '../fn/work-schedule-controller/set-worker-schedule';
import { SetWorkerSchedule$Params } from '../fn/work-schedule-controller/set-worker-schedule';
import { WeeklyScheduleResponse } from '../models/weekly-schedule-response';
import { WorkerHourResponse } from '../models/worker-hour-response';
import { WorkSchedulerResponse } from '../models/work-scheduler-response';

@Injectable({ providedIn: 'root' })
export class WorkScheduleControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `setWorkerSchedule()` */
  static readonly SetWorkerSchedulePath = '/schedule/worker/{workerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setWorkerSchedule()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  setWorkerSchedule$Response(params: SetWorkerSchedule$Params, context?: HttpContext): Observable<StrictHttpResponse<WorkSchedulerResponse>> {
    return setWorkerSchedule(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setWorkerSchedule$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  setWorkerSchedule(params: SetWorkerSchedule$Params, context?: HttpContext): Observable<WorkSchedulerResponse> {
    return this.setWorkerSchedule$Response(params, context).pipe(
      map((r: StrictHttpResponse<WorkSchedulerResponse>): WorkSchedulerResponse => r.body)
    );
  }

  /** Path part for operation `getWeekSchedule()` */
  static readonly GetWeekSchedulePath = '/schedule/week';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWeekSchedule()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWeekSchedule$Response(params?: GetWeekSchedule$Params, context?: HttpContext): Observable<StrictHttpResponse<WeeklyScheduleResponse>> {
    return getWeekSchedule(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWeekSchedule$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWeekSchedule(params?: GetWeekSchedule$Params, context?: HttpContext): Observable<WeeklyScheduleResponse> {
    return this.getWeekSchedule$Response(params, context).pipe(
      map((r: StrictHttpResponse<WeeklyScheduleResponse>): WeeklyScheduleResponse => r.body)
    );
  }

  /** Path part for operation `getSpecialWeekHours()` */
  static readonly GetSpecialWeekHoursPath = '/schedule/hours/special-week';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSpecialWeekHours()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSpecialWeekHours$Response(params: GetSpecialWeekHours$Params, context?: HttpContext): Observable<StrictHttpResponse<WorkerHourResponse>> {
    return getSpecialWeekHours(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSpecialWeekHours$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSpecialWeekHours(params: GetSpecialWeekHours$Params, context?: HttpContext): Observable<WorkerHourResponse> {
    return this.getSpecialWeekHours$Response(params, context).pipe(
      map((r: StrictHttpResponse<WorkerHourResponse>): WorkerHourResponse => r.body)
    );
  }

  /** Path part for operation `getCurrentWeekHours()` */
  static readonly GetCurrentWeekHoursPath = '/schedule/hours/current-week';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCurrentWeekHours()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentWeekHours$Response(params?: GetCurrentWeekHours$Params, context?: HttpContext): Observable<StrictHttpResponse<WorkerHourResponse>> {
    return getCurrentWeekHours(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCurrentWeekHours$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentWeekHours(params?: GetCurrentWeekHours$Params, context?: HttpContext): Observable<WorkerHourResponse> {
    return this.getCurrentWeekHours$Response(params, context).pipe(
      map((r: StrictHttpResponse<WorkerHourResponse>): WorkerHourResponse => r.body)
    );
  }

}
