/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changePunchInForWorker } from '../fn/admin-controller/change-punch-in-for-worker';
import { ChangePunchInForWorker$Params } from '../fn/admin-controller/change-punch-in-for-worker';
import { ChangePunchInForWorkerResponse } from '../models/change-punch-in-for-worker-response';
import { changePunchOutForWorker } from '../fn/admin-controller/change-punch-out-for-worker';
import { ChangePunchOutForWorker$Params } from '../fn/admin-controller/change-punch-out-for-worker';
import { ChangePunchOutForWorkerResponse } from '../models/change-punch-out-for-worker-response';
import { deleteWorkerPunchIn } from '../fn/admin-controller/delete-worker-punch-in';
import { DeleteWorkerPunchIn$Params } from '../fn/admin-controller/delete-worker-punch-in';
import { getWorkersInWorksite } from '../fn/admin-controller/get-workers-in-worksite';
import { GetWorkersInWorksite$Params } from '../fn/admin-controller/get-workers-in-worksite';
import { PageResponseWorksiteWorkerResponse } from '../models/page-response-worksite-worker-response';
import { UpdatePunchInForWorkerResponse } from '../models/update-punch-in-for-worker-response';
import { updatePunchInTime } from '../fn/admin-controller/update-punch-in-time';
import { UpdatePunchInTime$Params } from '../fn/admin-controller/update-punch-in-time';

@Injectable({ providedIn: 'root' })
export class AdminControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updatePunchInTime()` */
  static readonly UpdatePunchInTimePath = '/admin/worker/{workerId}/punch-in';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePunchInTime()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePunchInTime$Response(params: UpdatePunchInTime$Params, context?: HttpContext): Observable<StrictHttpResponse<UpdatePunchInForWorkerResponse>> {
    return updatePunchInTime(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePunchInTime$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePunchInTime(params: UpdatePunchInTime$Params, context?: HttpContext): Observable<UpdatePunchInForWorkerResponse> {
    return this.updatePunchInTime$Response(params, context).pipe(
      map((r: StrictHttpResponse<UpdatePunchInForWorkerResponse>): UpdatePunchInForWorkerResponse => r.body)
    );
  }

  /** Path part for operation `changePunchInForWorker()` */
  static readonly ChangePunchInForWorkerPath = '/admin/worker/{workerId}/punch-in';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changePunchInForWorker()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePunchInForWorker$Response(params: ChangePunchInForWorker$Params, context?: HttpContext): Observable<StrictHttpResponse<ChangePunchInForWorkerResponse>> {
    return changePunchInForWorker(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changePunchInForWorker$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePunchInForWorker(params: ChangePunchInForWorker$Params, context?: HttpContext): Observable<ChangePunchInForWorkerResponse> {
    return this.changePunchInForWorker$Response(params, context).pipe(
      map((r: StrictHttpResponse<ChangePunchInForWorkerResponse>): ChangePunchInForWorkerResponse => r.body)
    );
  }

  /** Path part for operation `changePunchOutForWorker()` */
  static readonly ChangePunchOutForWorkerPath = '/admin/worker/{workerId}/punch-out';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changePunchOutForWorker()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePunchOutForWorker$Response(params: ChangePunchOutForWorker$Params, context?: HttpContext): Observable<StrictHttpResponse<ChangePunchOutForWorkerResponse>> {
    return changePunchOutForWorker(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changePunchOutForWorker$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePunchOutForWorker(params: ChangePunchOutForWorker$Params, context?: HttpContext): Observable<ChangePunchOutForWorkerResponse> {
    return this.changePunchOutForWorker$Response(params, context).pipe(
      map((r: StrictHttpResponse<ChangePunchOutForWorkerResponse>): ChangePunchOutForWorkerResponse => r.body)
    );
  }

  /** Path part for operation `getWorkersInWorksite()` */
  static readonly GetWorkersInWorksitePath = '/admin/employee';

  /**
   * Get all workers in worksite.
   *
   * Retrieves paginated list of workers for a specific worksite
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWorkersInWorksite()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkersInWorksite$Response(params: GetWorkersInWorksite$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseWorksiteWorkerResponse>> {
    return getWorkersInWorksite(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all workers in worksite.
   *
   * Retrieves paginated list of workers for a specific worksite
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWorkersInWorksite$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkersInWorksite(params: GetWorkersInWorksite$Params, context?: HttpContext): Observable<PageResponseWorksiteWorkerResponse> {
    return this.getWorkersInWorksite$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseWorksiteWorkerResponse>): PageResponseWorksiteWorkerResponse => r.body)
    );
  }

  /** Path part for operation `deleteWorkerPunchIn()` */
  static readonly DeleteWorkerPunchInPath = '/admin/workers/{workerId}/punch-in';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteWorkerPunchIn()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWorkerPunchIn$Response(params: DeleteWorkerPunchIn$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteWorkerPunchIn(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteWorkerPunchIn$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWorkerPunchIn(params: DeleteWorkerPunchIn$Params, context?: HttpContext): Observable<void> {
    return this.deleteWorkerPunchIn$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
