package com.zikpak.facecheck.taxesServices.scheduler;


import com.zikpak.facecheck.entity.Company;
import com.zikpak.facecheck.entity.User;
import com.zikpak.facecheck.entity.employee.WorkerAttendance;
import com.zikpak.facecheck.entity.employee.WorkerPayroll;
import com.zikpak.facecheck.helperServices.WorkerPayRollService;
import com.zikpak.facecheck.repository.CompanyRepository;
import com.zikpak.facecheck.repository.UserRepository;
import com.zikpak.facecheck.repository.WorkerAttendanceRepository;
import com.zikpak.facecheck.repository.WorkerPayrollRepository;
import com.zikpak.facecheck.taxesServices.ASCIIservices.EFW2GeneratorService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.futaCustomTaxReport.FutaReportDTO;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.futaCustomTaxReport.FutaReportPdfService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.futaCustomTaxReport.FutaReportService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.hoursReport.HoursReportDTO;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.hoursReport.HoursReportDataService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.hoursReport.HoursReportPdfService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.payrollReport.PayrollSummaryDataService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.payrollReport.PayrollSummaryReportDTO;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.payrollReport.PayrollSummaryReportService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.taxSummary.TaxSummaryDataService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.taxSummary.TaxSummaryPdfService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.taxSummary.TaxSummaryReportDTO;
import com.zikpak.facecheck.taxesServices.efiles.xml.Form940ScheduleAXmlGenerator;
import com.zikpak.facecheck.taxesServices.efiles.xml.Form940XmlGenerator;
import com.zikpak.facecheck.taxesServices.efiles.xml.Form941ScheduleBXmlGenerator;
import com.zikpak.facecheck.taxesServices.efiles.xml.Form941XmlGenerator;
import com.zikpak.facecheck.taxesServices.efiles.csvReports.*;
import com.zikpak.facecheck.taxesServices.pdfServices.FillForm940SA;
import com.zikpak.facecheck.taxesServices.pdfServices.Form940PdfGeneratorService;
import com.zikpak.facecheck.taxesServices.services.EmployerTaxService;
import com.zikpak.facecheck.taxesServices.services.PayStubService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class EmployerTaxScheduler {

    private final WorkerPayrollRepository workerPayrollRepository;
    private final EmployerTaxService employerTaxService;
    private final PayStubService payStubService;
    private final WorkerPayRollService workerPayRollService;
    private final UserRepository userRepository;
    private final PayrollSummaryDataService payrollSummaryDataService;
    private final PayrollSummaryReportService payrollSummaryReportService;
    private final CompanyRepository companyRepository;
    private final HoursReportDataService hoursReportDataService;
    private final HoursReportPdfService hoursReportPdfService;
    private final WorkerAttendanceRepository attendanceRepository;
    private final TaxSummaryDataService taxSummaryDataService;
    private final TaxSummaryPdfService taxSummaryPdfService;

    private final HoursReportCsvService hoursReportCsvService;
    private final PayrollSummaryReportCsvService payrollSummaryReportCsvService;
    private final TaxSummaryReportCsvService taxSummaryReportCsvService;

    private final Form941XmlGenerator form941XmlGenerator;
    private final Form941ScheduleBXmlGenerator form941ScheduleBXmlGenerator;
    private final EFW2GeneratorService efw2GeneratorService;

    private final FillForm940SA fillForm940SA;
    private final Form940PdfGeneratorService form940PdfGeneratorService;

    private final Form940XmlGenerator form940XmlGenerator;
    private final Form940ScheduleAXmlGenerator generateForm940ScheduleAXml;


    private final FutaReportService futaReportService;
    private final FutaReportPdfService futaReportPdfService;

    @Scheduled(cron = "0 0 4 * * SUN") // –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 4:00 —É—Ç—Ä–∞
    // @Scheduled(fixedDelay = 10000) // –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    public void calculateWeeklyEmployerTaxes() {
        log.info("üßÆ Scheduler –∑–∞–ø—É—â–µ–Ω: –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç –Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö payroll'–æ–≤");

        List<WorkerPayroll> payrolls = workerPayrollRepository
                .findAllByPeriodEnd(LocalDate.now().minusDays(1)) // –≤—á–µ—Ä–∞ –±—ã–ª–∞ —Å—É–±–±–æ—Ç–∞
                .stream()
                .filter(p -> !p.isEmployerTaxesCalculated())
                .toList();

        for (WorkerPayroll payroll : payrolls) {
            try {
                employerTaxService.calculateAndSaveEmployerTaxes(payroll);
                payroll.setEmployerTaxesCalculated(true);

                workerPayrollRepository.save(payroll);
                log.info("‚úÖ –†–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è payroll ID: {}", payroll.getId());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è payroll ID: {}", payroll.getId(), e);
            }
        }

        log.info("üèÅ Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    }

    @Scheduled(cron = "0 0 5 * * SUN", zone = "America/New_York")
    public void generateWeeklyPayStubs() {
        log.info("üóì PayStubScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º paystubs –∑–∞ —Å—É–±–±–æ—Ç—É");

        LocalDate yesterday = LocalDate.now().minusDays(1); // —Å—É–±–±–æ—Ç–∞
        List<WorkerPayroll> payrolls = workerPayrollRepository
                .findAllByPeriodEnd(yesterday).stream()
                .filter(p -> !Boolean.TRUE.equals(p.getPayStubGenerated()))
                .toList();

        for (WorkerPayroll payroll : payrolls) {
            try {
                payStubService.generatePayStubPdf(payroll.getId());
                payroll.setPayStubGenerated(true);
                workerPayrollRepository.save(payroll);
                log.info("‚úÖ PayStub —Å–≥–µ–Ω–µ—Ä—ë–Ω –¥–ª—è payroll ID={}", payroll.getId());
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ paystub –¥–ª—è payroll ID={}", payroll.getId(), ex);
            }
        }

        log.info("üèÅ PayStubScheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    }

    @Scheduled(cron = "0 0 5 3 1 *", zone = "America/New_York")
    public void generateAllW2FormsFor2025() {
        if(LocalDate.now().getYear() != 2026){
            return;
        }

        int targetYear = 2025;

        log.info("üìÑ W2FormScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º W-2 –∑–∞ {} –≤—Å–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º", targetYear);

        // 1) –ë–µ—Ä—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–ª–∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ ‚Äî —Ä–∞–±–æ—Ç–Ω–∏–∫–∏)
        for (User worker : userRepository.findAll()) {
            Integer workerId = worker.getId();
            try {
                // 2) –°–µ—Ä–≤–∏—Å –≤–Ω—É—Ç—Ä–∏ –∑–∞–ª–∏–≤–∞–µ—Ç PDF –≤ S3 –ø–æ –Ω—É–∂–Ω–æ–º—É –ø—É—Ç–∏
                workerPayRollService.generatePDF(workerId, targetYear);
                log.info("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω W-2 –¥–ª—è workerId={} –∑–∞ {}", workerId, targetYear);
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ W-2 –¥–ª—è workerId={}", workerId, ex);
            }
        }

        log.info("üèÅ W2FormScheduler –∑–∞–≤–µ—Ä—à–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é W-2 –∑–∞ {}", targetYear);
    }








//-------- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
    //New methods

    @Scheduled(cron = "0 0 6 * * SUN", zone = "America/New_York")
    public void generateWeeklyPayrollReports() {
        log.info("üìä Weekly PayrollReportScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã");

        LocalDate endDate = LocalDate.now().minusDays(1); // —Å—É–±–±–æ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)
        LocalDate startDate = endDate.minusDays(6); // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {} - {}", startDate, endDate);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ payrolls –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                List<WorkerPayroll> weeklyPayrolls = workerPayrollRepository
                        .findAllByCompanyIdAndPeriodBetween(company.getId(), startDate, endDate);

                if (!weeklyPayrolls.isEmpty()) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
                    PayrollSummaryReportDTO reportData = payrollSummaryDataService
                            .generatePayrollSummaryData(company.getId(), startDate, endDate);

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                    payrollSummaryReportService.generatePayrollSummaryReport(reportData);
                    log.info("‚úÖ Weekly report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {})",
                            company.getCompanyName(), company.getId());
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç payrolls –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {}", company.getCompanyName());
                }
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ weekly report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}", company.getId(), ex);
            }
        }

        log.info("üèÅ Weekly PayrollReportScheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    }


    @Scheduled(cron = "0 0 7 1-7 * SUN", zone = "America/New_York")
    public void generateMonthlyPayrollReports() {
        log.info("üìä Monthly PayrollReportScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã");

        LocalDate today = LocalDate.now();
        LocalDate endDate = today.minusMonths(1).withDayOfMonth(
                today.minusMonths(1).lengthOfMonth()); // –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
        LocalDate startDate = endDate.withDayOfMonth(1); // –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {} - {}", startDate, endDate);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ payrolls –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                List<WorkerPayroll> monthlyPayrolls = workerPayrollRepository
                        .findAllByCompanyIdAndPeriodBetween(company.getId(), startDate, endDate);

                if (!monthlyPayrolls.isEmpty()) {
                    PayrollSummaryReportDTO reportData = payrollSummaryDataService
                            .generatePayrollSummaryData(company.getId(), startDate, endDate);

                    payrollSummaryReportService.generatePayrollSummaryReport(reportData);

                    log.info("‚úÖ Monthly report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {}/{}",
                            company.getCompanyName(), company.getId(),
                            startDate.getMonthValue(), startDate.getYear());
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç payrolls –∑–∞ –º–µ—Å—è—Ü {}/{} –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {}",
                            startDate.getMonthValue(), startDate.getYear(), company.getCompanyName());
                }
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ monthly report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}", company.getId(), ex);
            }
        }

        log.info("üèÅ Monthly PayrollReportScheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    }

    @Scheduled(cron = "0 30 6 * * SUN", zone = "America/New_York")
    public void generateWeeklyHoursReports() {
        log.info("‚è∞ Weekly HoursReportScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ —á–∞—Å–∞–º");

        LocalDate endDate = LocalDate.now().minusDays(1); // —Å—É–±–±–æ—Ç–∞
        LocalDate startDate = endDate.minusDays(6); // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: {} - {}", startDate, endDate);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ workers –≤ –∫–æ–º–ø–∞–Ω–∏–∏
                List<User> workers = userRepository.findAllByCompanyId(company.getId());

                if (!workers.isEmpty()) {
                    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –≤ service
                    List<WorkerAttendance> weeklyAttendances = new ArrayList<>();

                    for (User worker : workers) {
                        List<WorkerAttendance> workerAttendances = attendanceRepository
                                .findAllByWorkerIdAndCheckInTimeBetween(
                                        worker.getId(),
                                        startDate.atStartOfDay(),
                                        endDate.atTime(23, 59, 59)
                                );
                        weeklyAttendances.addAll(workerAttendances);
                    }

                    if (!weeklyAttendances.isEmpty()) {
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —á–∞—Å–∞–º
                        HoursReportDTO reportData = hoursReportDataService
                                .generateHoursReportData(company.getId(), startDate, endDate);

                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                        hoursReportPdfService.generateHoursReport(reportData, company.getId());

                        log.info("‚úÖ Weekly hours report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {})",
                                company.getCompanyName(), company.getId());
                    } else {
                        log.info("‚ÑπÔ∏è –ù–µ—Ç attendance –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {}", company.getCompanyName());
                    }
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–ø–∞–Ω–∏–∏: {}", company.getCompanyName());
                }
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ weekly hours report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}", company.getId(), ex);
            }
        }

        log.info("üèÅ Weekly HoursReportScheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    }

    // ‚úÖ –ú–ï–°–Ø–ß–ù–´–ô HOURS REPORT (–∫–∞–∂–¥–æ–µ –ø–µ—Ä–≤–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –º–µ—Å—è—Ü–∞ –≤ 7:30 —É—Ç—Ä–∞)
    @Scheduled(cron = "0 30 7 1-7 * SUN", zone = "America/New_York")
    public void generateMonthlyHoursReports() {
        log.info("‚è∞ Monthly HoursReportScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ —á–∞—Å–∞–º");

        LocalDate today = LocalDate.now();
        LocalDate endDate = today.minusMonths(1).withDayOfMonth(
                today.minusMonths(1).lengthOfMonth());
        LocalDate startDate = endDate.withDayOfMonth(1);

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: {} - {}", startDate, endDate);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ workers –≤ –∫–æ–º–ø–∞–Ω–∏–∏
                List<User> workers = userRepository.findAllByCompanyId(company.getId());

                if (!workers.isEmpty()) {
                    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –≤ service
                    List<WorkerAttendance> monthlyAttendances = new ArrayList<>();

                    for (User worker : workers) {
                        List<WorkerAttendance> workerAttendances = attendanceRepository
                                .findAllByWorkerIdAndCheckInTimeBetween(
                                        worker.getId(),
                                        startDate.atStartOfDay(),
                                        endDate.atTime(23, 59, 59)
                                );
                        monthlyAttendances.addAll(workerAttendances);
                    }

                    if (!monthlyAttendances.isEmpty()) {
                        HoursReportDTO reportData = hoursReportDataService
                                .generateHoursReportData(company.getId(), startDate, endDate);

                        hoursReportPdfService.generateHoursReport(reportData, company.getId());

                        log.info("‚úÖ Monthly hours report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {}/{}",
                                company.getCompanyName(), company.getId(),
                                startDate.getMonthValue(), startDate.getYear());
                    } else {
                        log.info("‚ÑπÔ∏è –ù–µ—Ç attendance –∑–∞ –º–µ—Å—è—Ü {}/{} –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {}",
                                startDate.getMonthValue(), startDate.getYear(), company.getCompanyName());
                    }
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–ø–∞–Ω–∏–∏: {}", company.getCompanyName());
                }
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ monthly hours report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}", company.getId(), ex);
            }
        }

        log.info("üèÅ Monthly HoursReportScheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    }



    @Scheduled(cron = "0 0 9 1 1,4,7,10 *", zone = "America/New_York")
    public void generateQuarterlyTaxSummaryReports() {
        log.info("üìã Quarterly TaxSummaryScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º quarterly tax summary reports");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∞–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        int completedQuarter;
        if (currentMonth == 1) {        // 1 —è–Ω–≤–∞—Ä—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q4 –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
            completedQuarter = 4;
            currentYear = currentYear - 1;
        } else if (currentMonth == 4) { // 1 –∞–ø—Ä–µ–ª—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q1
            completedQuarter = 1;
        } else if (currentMonth == 7) { // 1 –∏—é–ª—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q2
            completedQuarter = 2;
        } else if (currentMonth == 10) { // 1 –æ–∫—Ç—è–±—Ä—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q3
            completedQuarter = 3;
        } else {
            log.info("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ quarterly scheduler. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {}", currentMonth);
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –∫–≤–∞—Ä—Ç–∞–ª–∞
        LocalDate startDate = LocalDate.of(currentYear, (completedQuarter - 1) * 3 + 1, 1);
        LocalDate endDate = startDate.plusMonths(3).minusDays(1);

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Tax Summary Reports –∑–∞ Q{} {} (–ø–µ—Ä–∏–æ–¥: {} - {})",
                completedQuarter, currentYear, startDate, endDate);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Tax Summary Report
                TaxSummaryReportDTO reportData = taxSummaryDataService
                        .generateTaxSummaryReport(company.getId(), startDate, endDate);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                taxSummaryPdfService.generateTaxSummaryReport(reportData);

                log.info("‚úÖ Quarterly Tax Summary Report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ Q{} {}",
                        company.getCompanyName(), company.getId(), completedQuarter, currentYear);

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Tax Summary Report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ Q{} {}",
                        company.getId(), completedQuarter, currentYear, ex);
            }
        }

        log.info("üèÅ Quarterly TaxSummaryScheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ Q{} {}", completedQuarter, currentYear);
    }

// =============================================================================
// üìÖ MONTHLY CSV REPORTS
// =============================================================================

    @Scheduled(cron = "0 15 7 1-7 * SUN", zone = "America/New_York") // 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    public void generateMonthlyPayrollReportsCsv() {
        log.info("üìä Monthly PayrollReportCSV Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—ã–µ CSV –æ—Ç—á–µ—Ç—ã");

        LocalDate today = LocalDate.now();
        LocalDate endDate = today.minusMonths(1).withDayOfMonth(
                today.minusMonths(1).lengthOfMonth());
        LocalDate startDate = endDate.withDayOfMonth(1);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                List<WorkerPayroll> monthlyPayrolls = workerPayrollRepository
                        .findAllByCompanyIdAndPeriodBetween(company.getId(), startDate, endDate);

                if (!monthlyPayrolls.isEmpty()) {
                    PayrollSummaryReportDTO reportData = payrollSummaryDataService
                            .generatePayrollSummaryData(company.getId(), startDate, endDate);

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                    payrollSummaryReportCsvService.generatePayrollSummaryReportCsv(reportData, company.getId());

                    log.info("‚úÖ Monthly CSV report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {}/{}",
                            company.getCompanyName(), company.getId(),
                            startDate.getMonthValue(), startDate.getYear());
                }
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ monthly CSV report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}", company.getId(), ex);
            }
        }

        log.info("üèÅ Monthly PayrollReportCSV Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    }

    @Scheduled(cron = "0 45 7 1-7 * SUN", zone = "America/New_York") // 45 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    public void generateMonthlyHoursReportsCsv() {
        log.info("‚è∞ Monthly HoursReportCSV Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—ã–µ CSV –æ—Ç—á–µ—Ç—ã –ø–æ —á–∞—Å–∞–º");

        LocalDate today = LocalDate.now();
        LocalDate endDate = today.minusMonths(1).withDayOfMonth(
                today.minusMonths(1).lengthOfMonth());
        LocalDate startDate = endDate.withDayOfMonth(1);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                List<User> workers = userRepository.findAllByCompanyId(company.getId());

                if (!workers.isEmpty()) {
                    List<WorkerAttendance> monthlyAttendances = new ArrayList<>();

                    for (User worker : workers) {
                        List<WorkerAttendance> workerAttendances = attendanceRepository
                                .findAllByWorkerIdAndCheckInTimeBetween(
                                        worker.getId(),
                                        startDate.atStartOfDay(),
                                        endDate.atTime(23, 59, 59)
                                );
                        monthlyAttendances.addAll(workerAttendances);
                    }

                    if (!monthlyAttendances.isEmpty()) {
                        HoursReportDTO reportData = hoursReportDataService
                                .generateHoursReportData(company.getId(), startDate, endDate);

                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                        hoursReportCsvService.generateHoursReportCsv(reportData, company.getId());

                        log.info("‚úÖ Monthly hours CSV report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {}/{}",
                                company.getCompanyName(), company.getId(),
                                startDate.getMonthValue(), startDate.getYear());
                    }
                }
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ monthly hours CSV report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}", company.getId(), ex);
            }
        }

        log.info("üèÅ Monthly HoursReportCSV Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    }

// =============================================================================
// üìã QUARTERLY TAX SUMMARY CSV REPORTS
// =============================================================================

    @Scheduled(cron = "0 30 9 1 1,4,7,10 *", zone = "America/New_York") // 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    public void generateQuarterlyTaxSummaryReportsCsv() {
        log.info("üìã Quarterly TaxSummaryCSV Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º quarterly tax summary CSV reports");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∞–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        int completedQuarter;
        if (currentMonth == 1) {
            completedQuarter = 4;
            currentYear = currentYear - 1;
        } else if (currentMonth == 4) {
            completedQuarter = 1;
        } else if (currentMonth == 7) {
            completedQuarter = 2;
        } else if (currentMonth == 10) {
            completedQuarter = 3;
        } else {
            log.info("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ quarterly CSV scheduler. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {}", currentMonth);
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –∫–≤–∞—Ä—Ç–∞–ª–∞
        LocalDate startDate = LocalDate.of(currentYear, (completedQuarter - 1) * 3 + 1, 1);
        LocalDate endDate = startDate.plusMonths(3).minusDays(1);

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Tax Summary CSV Reports –∑–∞ Q{} {} (–ø–µ—Ä–∏–æ–¥: {} - {})",
                completedQuarter, currentYear, startDate, endDate);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                TaxSummaryReportDTO reportData = taxSummaryDataService
                        .generateTaxSummaryReport(company.getId(), startDate, endDate);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                taxSummaryReportCsvService.generateTaxSummaryReportCsv(reportData, company.getId());

                log.info("‚úÖ Quarterly Tax Summary CSV Report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ Q{} {}",
                        company.getCompanyName(), company.getId(), completedQuarter, currentYear);

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Tax Summary CSV Report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ Q{} {}",
                        company.getId(), completedQuarter, currentYear, ex);
            }
        }

        log.info("üèÅ Quarterly TaxSummaryCSV Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ Q{} {}", completedQuarter, currentYear);
    }


// üìã QUARTERLY E-FILE GENERATION (Form 941 & Schedule B)
// =============================================================================

    @Scheduled(cron = "0 0 10 15 1,4,7,10 *", zone = "America/New_York") // 15 —á–∏—Å–ª–æ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –≤ 10:00
    public void generateQuarterlyForm941XmlFiles() {
        log.info("üìã Quarterly Form941XML Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º quarterly Form 941 XML files");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∞–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        int completedQuarter;
        if (currentMonth == 1) {        // 15 —è–Ω–≤–∞—Ä—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q4 –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
            completedQuarter = 4;
            currentYear = currentYear - 1;
        } else if (currentMonth == 4) { // 15 –∞–ø—Ä–µ–ª—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q1
            completedQuarter = 1;
        } else if (currentMonth == 7) { // 15 –∏—é–ª—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q2
            completedQuarter = 2;
        } else if (currentMonth == 10) { // 15 –æ–∫—Ç—è–±—Ä—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q3
            completedQuarter = 3;
        } else {
            log.info("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ quarterly Form941XML scheduler. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {}", currentMonth);
            return;
        }

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 941 XML files –∑–∞ Q{} {}", completedQuarter, currentYear);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏)
                List<User> admins = userRepository.findAllByCompanyIdAndRole(company.getId(), "ADMIN");
                if (admins.isEmpty()) {
                    log.warn("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Form 941 XML", company.getCompanyName());
                    continue;
                }
                User admin = admins.get(0);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 941 XML
                String form941Xml = form941XmlGenerator.generateForm941Xml(
                        admin.getId(), company.getId(), currentYear, completedQuarter);

                log.info("‚úÖ Form 941 XML —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ Q{} {}",
                        company.getCompanyName(), company.getId(), completedQuarter, currentYear);

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Form 941 XML –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ Q{} {}",
                        company.getId(), completedQuarter, currentYear, ex);
            }
        }

        log.info("üèÅ Quarterly Form941XML Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ Q{} {}", completedQuarter, currentYear);
    }

    @Scheduled(cron = "0 30 10 15 1,4,7,10 *", zone = "America/New_York") // 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ Form 941
    public void generateQuarterlyForm941ScheduleBXmlFiles() {
        log.info("üìã Quarterly Form941ScheduleBXML Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º quarterly Form 941 Schedule B XML files");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∞–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞)
        int completedQuarter;
        if (currentMonth == 1) {
            completedQuarter = 4;
            currentYear = currentYear - 1;
        } else if (currentMonth == 4) {
            completedQuarter = 1;
        } else if (currentMonth == 7) {
            completedQuarter = 2;
        } else if (currentMonth == 10) {
            completedQuarter = 3;
        } else {
            log.info("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ quarterly Form941ScheduleBXML scheduler. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {}", currentMonth);
            return;
        }

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 941 Schedule B XML files –∑–∞ Q{} {}", completedQuarter, currentYear);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                List<User> admins = userRepository.findAllByCompanyIdAndRole(company.getId(), "ADMIN");
                if (admins.isEmpty()) {
                    log.warn("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Form 941 Schedule B XML", company.getCompanyName());
                    continue;
                }
                User admin = admins.get(0);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 941 Schedule B XML
                String form941ScheduleBXml = form941ScheduleBXmlGenerator.generateForm941ScheduleBXml(
                        admin.getId(), company.getId(), currentYear, completedQuarter);

                log.info("‚úÖ Form 941 Schedule B XML —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ Q{} {}",
                        company.getCompanyName(), company.getId(), completedQuarter, currentYear);

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Form 941 Schedule B XML –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ Q{} {}",
                        company.getId(), completedQuarter, currentYear, ex);
            }
        }

        log.info("üèÅ Quarterly Form941ScheduleBXML Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ Q{} {}", completedQuarter, currentYear);
    }

// =============================================================================
// üìÑ ANNUAL E-FILE GENERATION (EFW2)
// =============================================================================

    @Scheduled(cron = "0 0 11 31 1 *", zone = "America/New_York") // 31 —è–Ω–≤–∞—Ä—è –≤ 11:00 (deadline –¥–ª—è W-2)
    public void generateAnnualEFW2Files() {
        log.info("üìÑ Annual EFW2 Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º EFW2 files –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥");

        LocalDate today = LocalDate.now();
        int previousYear = today.getYear() - 1; // EFW2 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º EFW2 files –∑–∞ {} –≥–æ–¥", previousYear);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥
                List<User> employees = userRepository.findAllByCompanyId(company.getId());

                if (!employees.isEmpty()) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º EFW2 —Ñ–∞–π–ª
                    byte[] efw2Content = efw2GeneratorService.generateEfw2File(company.getId(), previousYear);

                    log.info("‚úÖ EFW2 file —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {} –≥–æ–¥, —Ä–∞–∑–º–µ—Ä: {} bytes",
                            company.getCompanyName(), company.getId(), previousYear, efw2Content.length);
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–ø–∞–Ω–∏–∏: {} –∑–∞ {} –≥–æ–¥", company.getCompanyName(), previousYear);
                }

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ EFW2 file –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ {} –≥–æ–¥",
                        company.getId(), previousYear, ex);
            }
        }

        log.info("üèÅ Annual EFW2 Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} –≥–æ–¥", previousYear);
    }


    @Scheduled(cron = "0 0 11 15 1 *", zone = "America/New_York")
    public void generateAnnualForm940AndScheduleA() {
        log.info("üìÑ Annual Form940 + Schedule A Scheduler –∑–∞–ø—É—â–µ–Ω");

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                //todo change later on 2025!
                form940PdfGeneratorService.generate940Pdf(company.getId(), 2024);
                fillForm940SA.generateFilledPdf(company.getId(), 2024);

                log.info("‚úÖ Form 940 + Schedule A —Å–≥–µ–Ω–µ—Ä–µ–Ω—ã –¥–ª—è {}", company.getCompanyName());
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {}", company.getId(), ex);
            }
        }
    }

    @Scheduled(cron = "0 0 12 31 1 *", zone = "America/New_York") // 31 —è–Ω–≤–∞—Ä—è –≤ 12:00 (–ø–æ—Å–ª–µ PDF)
    public void generateAnnualForm940XmlFiles() {
        log.info("üìÑ Annual Form940XML Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 940 XML e-files –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥");

        LocalDate today = LocalDate.now();
        int previousYear = today.getYear() - 1; // Form 940 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 940 XML e-files –∑–∞ {} –≥–æ–¥", previousYear);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                List<User> admins = getCompanyAdmins(company.getId());
                if (admins.isEmpty()) {
                    log.warn("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Form 940 XML", company.getCompanyName());
                    continue;
                }
                User admin = admins.get(0);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 940 XML e-file
                String form940Xml = form940XmlGenerator.generateForm940Xml(
                        admin.getId(), company.getId(), previousYear);

                log.info("‚úÖ Form 940 XML e-file —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {} –≥–æ–¥",
                        company.getCompanyName(), company.getId(), previousYear);

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Form 940 XML –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ {} –≥–æ–¥",
                        company.getId(), previousYear, ex);
            }
        }

        log.info("üèÅ Annual Form940XML Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} –≥–æ–¥", previousYear);
    }

    @Scheduled(cron = "0 30 12 31 1 *", zone = "America/New_York") // 31 —è–Ω–≤–∞—Ä—è –≤ 12:30 (–ø–æ—Å–ª–µ Form 940 XML)
    public void generateAnnualForm940ScheduleAXmlFiles() {
        log.info("üìÑ Annual Form940ScheduleAXML Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º Schedule A XML e-files –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥");

        LocalDate today = LocalDate.now();
        int previousYear = today.getYear() - 1;

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 940 Schedule A XML e-files –∑–∞ {} –≥–æ–¥", previousYear);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // –¢–æ–ª—å–∫–æ –¥–ª—è NY –∫–æ–º–ø–∞–Ω–∏–π
                if (!"NY".equals(company.getCompanyState())) {
                    log.info("‚ÑπÔ∏è –ö–æ–º–ø–∞–Ω–∏—è {} –≤ —à—Ç–∞—Ç–µ {} - Schedule A XML –Ω–µ –Ω—É–∂–Ω–∞",
                            company.getCompanyName(), company.getCompanyState());
                    continue;
                }

                // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                List<User> admins = getCompanyAdmins(company.getId());
                if (admins.isEmpty()) {
                    log.warn("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Schedule A XML", company.getCompanyName());
                    continue;
                }
                User admin = admins.get(0);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Schedule A XML e-file
                String scheduleAXml = generateForm940ScheduleAXml.generateForm940ScheduleAXml(
                        admin.getId(), company.getId(), previousYear);

                if (!scheduleAXml.isEmpty()) {
                    log.info("‚úÖ Form 940 Schedule A XML e-file —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {} –≥–æ–¥",
                            company.getCompanyName(), company.getId(), previousYear);
                } else {
                    log.info("‚ÑπÔ∏è Schedule A XML –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {}", company.getCompanyName());
                }

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Schedule A XML –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ {} –≥–æ–¥",
                        company.getId(), previousYear, ex);
            }
        }

        log.info("üèÅ Annual Form940ScheduleAXML Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} –≥–æ–¥", previousYear);
    }


    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ FUTA –æ—Ç—á–µ—Ç—ã
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 15 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ (—è–Ω–≤, –∞–ø—Ä, –∏—é–ª—å, –æ–∫—Ç) –≤ 8:00
     */
    @Scheduled(cron = "0 0 8 15 1,4,7,10 *", zone = "America/New_York")
    public void generateQuarterlyFutaReports() {
        log.info("üìã Quarterly FUTA Report Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º quarterly FUTA reports");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∞–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        int completedQuarter;
        if (currentMonth == 1) {        // 15 —è–Ω–≤–∞—Ä—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q4 –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
            completedQuarter = 4;
            currentYear = currentYear - 1;
        } else if (currentMonth == 4) { // 15 –∞–ø—Ä–µ–ª—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q1
            completedQuarter = 1;
        } else if (currentMonth == 7) { // 15 –∏—é–ª—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q2
            completedQuarter = 2;
        } else if (currentMonth == 10) { // 15 –æ–∫—Ç—è–±—Ä—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q3
            completedQuarter = 3;
        } else {
            log.info("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ quarterly FUTA scheduler. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {}", currentMonth);
            return;
        }

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º FUTA Reports –∑–∞ Q{} {}", completedQuarter, currentYear);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏
                List<User> employees = userRepository.findAllByCompanyId(company.getId());

                if (!employees.isEmpty()) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π FUTA –æ—Ç—á–µ—Ç
                    FutaReportDTO reportData = futaReportService.generateQuarterlyFutaReport(
                            company.getId(), currentYear, completedQuarter);

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                    byte[] pdfBytes = futaReportPdfService.generateFutaReportPdf(reportData);

                    log.info("‚úÖ Quarterly FUTA Report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ Q{} {}, —Ä–∞–∑–º–µ—Ä PDF: {} bytes",
                            company.getCompanyName(), company.getId(), completedQuarter, currentYear, pdfBytes.length);
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–ø–∞–Ω–∏–∏: {} –∑–∞ Q{} {}",
                            company.getCompanyName(), completedQuarter, currentYear);
                }

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ quarterly FUTA report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ Q{} {}",
                        company.getId(), completedQuarter, currentYear, ex);
            }
        }

        log.info("üèÅ Quarterly FUTA Report Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ Q{} {}", completedQuarter, currentYear);
    }

// =============================================================================
// üìã ANNUAL FUTA REPORTS
// =============================================================================

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ–¥–æ–≤—ã–µ FUTA –æ—Ç—á–µ—Ç—ã
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 31 —è–Ω–≤–∞—Ä—è –≤ 9:00 —É—Ç—Ä–∞ (–¥–µ–¥–ª–∞–π–Ω –¥–ª—è Form 940)
     */
    @Scheduled(cron = "0 0 9 31 1 *", zone = "America/New_York")
    public void generateAnnualFutaReports() {
        log.info("üìÑ Annual FUTA Report Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º annual FUTA reports –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥");

        LocalDate today = LocalDate.now();
        int previousYear = today.getYear() - 1; // –ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Annual FUTA Reports –∑–∞ {} –≥–æ–¥", previousYear);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
                List<User> employees = userRepository.findAllByCompanyId(company.getId());

                if (!employees.isEmpty()) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–¥–æ–≤–æ–π FUTA –æ—Ç—á–µ—Ç
                    FutaReportDTO reportData = futaReportService.generateAnnualFutaReport(
                            company.getId(), previousYear);

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                    byte[] pdfBytes = futaReportPdfService.generateFutaReportPdf(reportData);

                    log.info("‚úÖ Annual FUTA Report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {} –≥–æ–¥, —Ä–∞–∑–º–µ—Ä PDF: {} bytes",
                            company.getCompanyName(), company.getId(), previousYear, pdfBytes.length);
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–ø–∞–Ω–∏–∏: {} –∑–∞ {} –≥–æ–¥",
                            company.getCompanyName(), previousYear);
                }

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ annual FUTA report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ {} –≥–æ–¥",
                        company.getId(), previousYear, ex);
            }
        }

        log.info("üèÅ Annual FUTA Report Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} –≥–æ–¥", previousYear);
    }

// =============================================================================
// üìã QUARTERLY FUTA COMPLIANCE CHECK
// =============================================================================

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç compliance –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–µ–¥–ª–∞–π–Ω–∞—Ö
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 6:00 —É—Ç—Ä–∞
     */
    @Scheduled(cron = "0 0 6 * * MON", zone = "America/New_York")
    public void checkQuarterlyFutaCompliance() {
        log.info("‚ö†Ô∏è FUTA Compliance Check Scheduler –∑–∞–ø—É—â–µ–Ω: –ø—Ä–æ–≤–µ—Ä—è–µ–º compliance –∏ –¥–µ–¥–ª–∞–π–Ω—ã");

        LocalDate today = LocalDate.now();
        int currentMonth = today.getMonthValue();
        int currentYear = today.getYear();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª –∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–¥–ª–∞–π–Ω
        int currentQuarter;
        LocalDate nextDeadline;

        if (currentMonth >= 1 && currentMonth <= 3) {
            currentQuarter = 1;
            nextDeadline = LocalDate.of(currentYear, 4, 30); // Q1 deadline
        } else if (currentMonth >= 4 && currentMonth <= 6) {
            currentQuarter = 2;
            nextDeadline = LocalDate.of(currentYear, 7, 31); // Q2 deadline
        } else if (currentMonth >= 7 && currentMonth <= 9) {
            currentQuarter = 3;
            nextDeadline = LocalDate.of(currentYear, 10, 31); // Q3 deadline
        } else {
            currentQuarter = 4;
            nextDeadline = LocalDate.of(currentYear + 1, 1, 31); // Q4 deadline
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 2 –Ω–µ–¥–µ–ª—å
        long daysUntilDeadline = today.until(nextDeadline).getDays();

        if (daysUntilDeadline <= 14 && daysUntilDeadline > 0) {
            log.info("‚ö†Ô∏è –î–æ FUTA –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {} –¥–Ω–µ–π. –ü—Ä–æ–≤–µ—Ä—è–µ–º compliance –¥–ª—è Q{} {}",
                    daysUntilDeadline, currentQuarter, currentYear);

            List<Company> allCompanies = companyRepository.findAll();

            for (Company company : allCompanies) {
                try {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    FutaReportDTO currentReport = futaReportService.generateQuarterlyFutaReport(
                            company.getId(), currentYear, currentQuarter);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º compliance
                    if (!currentReport.getComplianceStatus() || currentReport.getNeedsPayment()) {
                        log.warn("‚ö†Ô∏è COMPLIANCE ALERT: –ö–æ–º–ø–∞–Ω–∏—è {} (ID: {}) —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –ø–æ FUTA –∑–∞ Q{} {}. " +
                                        "Compliance: {}, Needs Payment: {}, Remaining Liability: ${}",
                                company.getCompanyName(), company.getId(), currentQuarter, currentYear,
                                currentReport.getComplianceStatus(), currentReport.getNeedsPayment(),
                                currentReport.getRemainingFutaLiability());

                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º –∫–æ–º–ø–∞–Ω–∏–∏
                        // sendFutaComplianceAlert(company, currentReport, daysUntilDeadline);
                    }

                } catch (Exception ex) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ FUTA compliance –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}", company.getId(), ex);
                }
            }
        } else if (daysUntilDeadline <= 0) {
            log.warn("üö® FUTA –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ {} –¥–Ω–µ–π!", Math.abs(daysUntilDeadline));
        }

        log.info("üèÅ FUTA Compliance Check –∑–∞–≤–µ—Ä—à–µ–Ω");
    }

// =============================================================================
// üìã FUTA YEAR-END PREPARATION
// =============================================================================

    /**
     * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫ –∫–æ–Ω—Ü—É –≥–æ–¥–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã)
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 15 –¥–µ–∫–∞–±—Ä—è –≤ 10:00 —É—Ç—Ä–∞
     */
    @Scheduled(cron = "0 0 10 15 12 *", zone = "America/New_York")
    public void prepareFutaYearEndReports() {
        log.info("üìã FUTA Year-End Preparation Scheduler –∑–∞–ø—É—â–µ–Ω: –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫ –∫–æ–Ω—Ü—É –≥–æ–¥–∞");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();

        log.info("üìÖ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º FUTA –¥–∞–Ω–Ω—ã–µ –∑–∞ {} –≥–æ–¥ –∫ –∫–æ–Ω—Ü—É –≥–æ–¥–∞", currentYear);

        List<Company> allCompanies = companyRepository.findAll();

        for (Company company : allCompanies) {
            try {
                log.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ FUTA –æ—Ç—á–µ—Ç—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {})",
                        company.getCompanyName(), company.getId());

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ 4 –∫–≤–∞—Ä—Ç–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
                BigDecimal totalAnnualLiability = BigDecimal.ZERO;
                BigDecimal totalAnnualPaid = BigDecimal.ZERO;
                List<String> missingQuarters = new ArrayList<>();

                for (int quarter = 1; quarter <= 4; quarter++) {
                    try {
                        FutaReportDTO quarterlyReport = futaReportService.generateQuarterlyFutaReport(
                                company.getId(), currentYear, quarter);

                        totalAnnualLiability = totalAnnualLiability.add(quarterlyReport.getTotalFutaTaxOwed());
                        totalAnnualPaid = totalAnnualPaid.add(quarterlyReport.getTotalFutaTaxPaid());

                        if (!quarterlyReport.getComplianceStatus()) {
                            missingQuarters.add("Q" + quarter);
                        }

                        log.info("‚úÖ Q{} {}: Owed=${}, Paid=${}, Compliant={}",
                                quarter, currentYear,
                                quarterlyReport.getTotalFutaTaxOwed(),
                                quarterlyReport.getTotalFutaTaxPaid(),
                                quarterlyReport.getComplianceStatus());

                    } catch (Exception ex) {
                        log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Q{} –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {}", quarter, company.getId(), ex);
                        missingQuarters.add("Q" + quarter + " (ERROR)");
                    }
                }

                // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
                BigDecimal remainingLiability = totalAnnualLiability.subtract(totalAnnualPaid);

                log.info("üìä –ò—Ç–æ–≥–∏ {} –≥–æ–¥–∞ –¥–ª—è {}: Total Owed=${}, Total Paid=${}, Remaining=${}, Issues={}",
                        currentYear, company.getCompanyName(),
                        totalAnnualLiability, totalAnnualPaid, remainingLiability,
                        missingQuarters.isEmpty() ? "None" : String.join(", ", missingQuarters));

                if (!missingQuarters.isEmpty() || remainingLiability.compareTo(BigDecimal.ONE) > 0) {
                    log.warn("‚ö†Ô∏è YEAR-END ALERT: –ö–æ–º–ø–∞–Ω–∏—è {} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ü–æ–º –≥–æ–¥–∞. " +
                                    "–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–≤–∞—Ä—Ç–∞–ª—ã: {}, Remaining Liability: ${}",
                            company.getCompanyName(),
                            missingQuarters.isEmpty() ? "None" : String.join(", ", missingQuarters),
                            remainingLiability);

                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    // sendFutaYearEndAlert(company, totalAnnualLiability, totalAnnualPaid, missingQuarters);
                }

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ year-end preparation –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}", company.getId(), ex);
            }
        }

        log.info("üèÅ FUTA Year-End Preparation –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {} –≥–æ–¥", currentYear);
    }













    private List<User> getCompanyAdmins(Integer companyId) {
        try {
            // –ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ —Å —Ä–æ–ª—è–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            return userRepository.findAllByCompanyIdAndRole(companyId, "ADMIN");
        } catch (Exception e) {
            return userRepository.findAllByCompanyId(companyId).stream()
                    .filter(user -> {

                        return user.getRoles() != null && user.getRoles().stream()
                                .anyMatch(role -> "ADMIN".equals(role.getName()));
                    })
                    .toList();
        }

    }

}
