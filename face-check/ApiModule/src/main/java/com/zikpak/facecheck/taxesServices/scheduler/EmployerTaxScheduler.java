package com.zikpak.facecheck.taxesServices.scheduler;


import com.zikpak.facecheck.entity.Company;
import com.zikpak.facecheck.entity.CompanyPaymentPosition;
import com.zikpak.facecheck.entity.Role;
import com.zikpak.facecheck.entity.User;
import com.zikpak.facecheck.entity.employee.WorkerAttendance;
import com.zikpak.facecheck.entity.employee.WorkerPayroll;
import com.zikpak.facecheck.helperServices.WorkerPayRollService;
import com.zikpak.facecheck.repository.*;
import com.zikpak.facecheck.security.mailServiceForReports.ReportsMailSender;
import com.zikpak.facecheck.taxesServices.ASCIIservices.EFW2GeneratorService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.futaCustomTaxReport.FutaReportDTO;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.futaCustomTaxReport.FutaReportPdfService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.futaCustomTaxReport.FutaReportService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.hoursReport.HoursReportDTO;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.hoursReport.HoursReportDataService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.hoursReport.HoursReportPdfService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.payrollReport.PayrollSummaryDataService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.payrollReport.PayrollSummaryReportDTO;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.payrollReport.PayrollSummaryReportService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.sutaCustomTaxReturn.SutaReportDTO;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.sutaCustomTaxReturn.SutaReportPdfService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.sutaCustomTaxReturn.SutaReportService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.taxSummary.TaxSummaryDataService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.taxSummary.TaxSummaryPdfService;
import com.zikpak.facecheck.taxesServices.customReportsForCompanys.taxSummary.TaxSummaryReportDTO;
import com.zikpak.facecheck.taxesServices.efiles.xml.Form940ScheduleAXmlGenerator;
import com.zikpak.facecheck.taxesServices.efiles.xml.Form940XmlGenerator;
import com.zikpak.facecheck.taxesServices.efiles.xml.Form941ScheduleBXmlGenerator;
import com.zikpak.facecheck.taxesServices.efiles.xml.Form941XmlGenerator;
import com.zikpak.facecheck.taxesServices.efiles.csvReports.*;
import com.zikpak.facecheck.taxesServices.pdfServices.FillForm940SA;
import com.zikpak.facecheck.taxesServices.pdfServices.Form940PdfGeneratorService;
import com.zikpak.facecheck.taxesServices.pdfServices.W2OfficialPDFService;
import com.zikpak.facecheck.taxesServices.services.EmployerTaxService;
import com.zikpak.facecheck.taxesServices.services.PayStubService;
import com.zikpak.facecheck.taxesServices.services.wcRiskService.WcRiskCsvService;
import com.zikpak.facecheck.taxesServices.services.wcRiskService.WcRiskServiceForPDF;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Component
@RequiredArgsConstructor
public class EmployerTaxScheduler {

    private final WorkerPayrollRepository workerPayrollRepository;
    private final EmployerTaxService employerTaxService;
    private final PayStubService payStubService;
    private final WorkerPayRollService workerPayRollService;
    private final UserRepository userRepository;
    private final PayrollSummaryDataService payrollSummaryDataService;
    private final PayrollSummaryReportService payrollSummaryReportService;
    private final CompanyRepository companyRepository;
    private final HoursReportDataService hoursReportDataService;
    private final HoursReportPdfService hoursReportPdfService;
    private final WorkerAttendanceRepository attendanceRepository;
    private final RoleRepository roleRepository;
    private final TaxSummaryDataService taxSummaryDataService;
    private final TaxSummaryPdfService taxSummaryPdfService;

    private final HoursReportCsvService hoursReportCsvService;
    private final PayrollSummaryReportCsvService payrollSummaryReportCsvService;
    private final TaxSummaryReportCsvService taxSummaryReportCsvService;

    private final Form941XmlGenerator form941XmlGenerator;
    private final Form941ScheduleBXmlGenerator form941ScheduleBXmlGenerator;
    private final EFW2GeneratorService efw2GeneratorService;

    private final FillForm940SA fillForm940SA;
    private final Form940PdfGeneratorService form940PdfGeneratorService;

    private final Form940XmlGenerator form940XmlGenerator;
    private final Form940ScheduleAXmlGenerator generateForm940ScheduleAXml;


    private final FutaReportService futaReportService;
    private final FutaReportPdfService futaReportPdfService;

    private final SutaReportService sutaReportService;
    private final SutaReportPdfService sutaReportPdfService;

    private final ReportsMailSender reportsMailSender;
    private final W2OfficialPDFService w2OfficialPDFService;


    @Scheduled(cron = "0 0 4 * * SUN") // –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 4:00 —É—Ç—Ä–∞
    public void calculateWeeklyEmployerTaxes() {
        log.info("üßÆ Scheduler –∑–∞–ø—É—â–µ–Ω: –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç –Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö payroll'–æ–≤");

        LocalDate today = LocalDate.now();

        List<WorkerPayroll> payrolls = workerPayrollRepository
                .findAllByPeriodEnd(today.minusDays(1)) // –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
                .stream()
                .filter(p -> !p.isEmployerTaxesCalculated())
                .toList();

        for (WorkerPayroll payroll : payrolls) {
            try {
                Company company = payroll.getCompany(); // ‚¨ÖÔ∏è –≤–æ—Ç –∫–∞–∫ –±–µ—Ä—ë–º –∫–æ–º–ø–∞–Ω–∏—é

                if (!shouldCreateEmployerTaxRecord(payroll, company)) {
                    log.info("‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º payroll ID {} ‚Äî –ø–µ—Ä–∏–æ–¥ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω", payroll.getId());
                    continue;
                }

                employerTaxService.calculateAndSaveEmployerTaxes(payroll);
                payroll.setEmployerTaxesCalculated(true);
                workerPayrollRepository.save(payroll);

                log.info("‚úÖ –†–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è payroll ID: {}", payroll.getId());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è payroll ID: {}", payroll.getId(), e);
            }
        }

        log.info("üèÅ Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    }


/*

    @Scheduled(cron = "0 0 4 * * SUN") // –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    public void generatePayStubs() {
        log.info("üìÑ Scheduler: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Paystubs –Ω–∞—á–∞–ª–∞—Å—å");

        LocalDate today = LocalDate.now();

        List<WorkerPayroll> payrolls = workerPayrollRepository
                .findAllByPeriodEnd(today)
                .stream()
                .filter(p -> !Boolean.TRUE.equals(p.getPayStubGenerated()))
                .toList();

        for (WorkerPayroll payroll : payrolls) {
            try {
                Company company = payroll.getCompany();

                // –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
                if (company.getCompanyPaymentPosition() != null &&
                        today.equals(payroll.getPeriodEnd())) {

                    payStubService.generatePayStubPdf(payroll.getId());
                    payroll.setPayStubGenerated(true);
                    workerPayrollRepository.save(payroll);

                    log.info("‚úÖ Paystub —Å–æ–∑–¥–∞–Ω –¥–ª—è payroll ID: {}", payroll.getId());
                    log.info("üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ payrolls: {}", payrolls.size());
                }
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ paystub –¥–ª—è payroll ID: {}", payroll.getId(), e);
            }
        }

        log.info("üèÅ Scheduler: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Paystubs –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }

 */


 // 1) –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ ‚Äì —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π —Å WEEKLY
    @Scheduled(cron = "0 0 4 * * SUN", zone = "America/New_York")
    public void generateWeeklyPayStubs() {
        log.info("üìÑ Scheduler (WEEKLY): –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Paystubs");

        LocalDate today = LocalDate.now(ZoneId.of("America/New_York"));

        List<WorkerPayroll> payrolls = workerPayrollRepository
            .findAllByPeriodEnd(today).stream()
            .filter(p -> !Boolean.TRUE.equals(p.getPayStubGenerated()))
            .filter(p -> p.getCompany().getCompanyPaymentPosition() == CompanyPaymentPosition.WEEKLY)
            .toList();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        Map<Company, List<WorkerPayroll>> payrollsByCompany = payrolls.stream()
                .collect(Collectors.groupingBy(WorkerPayroll::getCompany));

        for (Map.Entry<Company, List<WorkerPayroll>> entry : payrollsByCompany.entrySet()) {
            Company company = entry.getKey();
            List<WorkerPayroll> companyPayrolls = entry.getValue();
            int successCount = 0;

            for (WorkerPayroll payroll : companyPayrolls) {
                try {
                    payStubService.generatePayStubPdf(payroll.getId());
                    payroll.setPayStubGenerated(true);
                    workerPayrollRepository.save(payroll);
                    successCount++;
                    log.info("‚úÖ WEEKLY paystub —Å–æ–∑–¥–∞–Ω –¥–ª—è payroll ID: {}", payroll.getId());
                } catch (Exception e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ WEEKLY –¥–ª—è payroll ID: {}", payroll.getId(), e);
                }
            }
            if (successCount > 0) {
                try {
                    reportsMailSender.sendEmailPaystubs(company.getCompanyEmail());
                    log.info("üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–ø–∞–Ω–∏–∏: {} (paystubs: {})",
                            company.getCompanyEmail(), successCount);
                } catch (Exception e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {}",
                            company.getCompanyEmail(), e);
                }
            }
        }

        log.info("üèÅ Scheduler (WEEKLY): –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—Å–µ–≥–æ: {}", payrolls.size());
    }

    // 2) –ë–∏-–Ω–µ–¥–µ–ª—å–Ω—ã–µ ‚Äì —Ç–æ–ª—å–∫–æ –¥–ª—è BIWEEKLY –∏ —Ç–æ–ª—å–∫–æ –≤ ¬´—á—ë—Ç–Ω—ã–µ¬ª –Ω–µ–¥–µ–ª–∏
    @Scheduled(cron = "0 30 4 * * SUN", zone = "America/New_York")
    public void generateBiweeklyPayStubs() {
        log.info("üìÑ Scheduler (BIWEEKLY): –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Paystubs");

        LocalDate today = LocalDate.now(ZoneId.of("America/New_York"));

        List<WorkerPayroll> payrolls = workerPayrollRepository
            .findAllByPeriodEnd(today).stream()
            .filter(p -> !Boolean.TRUE.equals(p.getPayStubGenerated()))
            .filter(p -> p.getCompany().getCompanyPaymentPosition() == CompanyPaymentPosition.BIWEEKLY)
            .filter(p -> {

                LocalDate first = p.getCompany().getFirstBiweeklyDate();
                long weeks = ChronoUnit.WEEKS.between(first, today);
                return weeks % 2 == 0; // —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω–∞—è
            })
            .toList();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        Map<Company, List<WorkerPayroll>> payrollsByCompany = payrolls.stream()
                .collect(Collectors.groupingBy(WorkerPayroll::getCompany));

        for (Map.Entry<Company, List<WorkerPayroll>> entry : payrollsByCompany.entrySet()) {
            Company company = entry.getKey();
            List<WorkerPayroll> companyPayrolls = entry.getValue();
            int successCount = 0;


        for (WorkerPayroll payroll : companyPayrolls) {
            try {
                payStubService.generatePayStubPdf(payroll.getId());
                payroll.setPayStubGenerated(true);
                workerPayrollRepository.save(payroll);
                successCount++;
                log.info("‚úÖ BIWEEKLY paystub —Å–æ–∑–¥–∞–Ω –¥–ª—è payroll ID: {}", payroll.getId());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ BIWEEKLY –¥–ª—è payroll ID: {}", payroll.getId(), e);
            }
        }
            if (successCount > 0) {
                try {
                    reportsMailSender.sendEmailPaystubs(company.getCompanyEmail());
                    log.info("üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–ø–∞–Ω–∏–∏: {} (paystubs: {})",
                            company.getCompanyEmail(), successCount);
                } catch (Exception e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {}",
                            company.getCompanyEmail(), e);
                }
            }
        }
        log.info("üèÅ Scheduler (BIWEEKLY): –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—Å–µ–≥–æ: {}", payrolls.size());
    }


    @Scheduled(cron = "0 0 5 3 1 *", zone = "America/New_York")
    public void generateAllW2FormsFor2025() {
        int currentYear = LocalDate.now().getYear();
        int targetYear = currentYear - 1; // W-2 –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ–¥
        if (currentYear != 2026) {
            log.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é W-2. –¢–µ–∫—É—â–∏–π –≥–æ–¥: {}, –æ–∂–∏–¥–∞–µ–º: 2026", currentYear);
            return;
        }

        log.info("üìÑ W2FormScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º W-2 –∑–∞ {} –≤—Å–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º", targetYear);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏—è (—Ç.–µ. –æ–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏)
        List<User> workers = userRepository.findAll().stream()
                .filter(user -> user.getCompany() != null)
                .filter(user -> !user.isBusinessOwner()) // –∏—Å–∫–ª—é—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–∏–∑–Ω–µ—Å–∞
                .toList();

        // –ò–õ–ò –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:
        // @Query("SELECT u FROM User u WHERE u.company IS NOT NULL AND u.isBusinessOwner = false")
        // List<User> findAllWorkers();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        Map<Company, List<User>> workersByCompany = new HashMap<>();

        for (User worker : workers) {
            try {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º W-2
                workerPayRollService.generatePDF(worker.getId(), targetYear);
                log.info("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω W-2 –¥–ª—è workerId={} –∑–∞ {}", worker.getId(), targetYear);

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
                Company company = worker.getCompany();
                workersByCompany.computeIfAbsent(company, k -> new ArrayList<>()).add(worker);

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ W-2 –¥–ª—è workerId={}", worker.getId(), ex);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º
        for (Map.Entry<Company, List<User>> entry : workersByCompany.entrySet()) {
            Company company = entry.getKey();
            int count = entry.getValue().size();
            try {
                reportsMailSender.sendEmailW2Forms(company.getCompanyEmail());
                log.info("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ W-2 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–∏: {} (forms: {})",
                        company.getCompanyEmail(), count);
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {}",
                        company.getCompanyEmail(), e);
            }
        }

        log.info("üèÅ W2FormScheduler –∑–∞–≤–µ—Ä—à–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é W-2 –∑–∞ {}. –í—Å–µ–≥–æ: {} —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤",
                targetYear, workers.size());
    }


    @Scheduled(cron = "0 0 7 3 1 *", zone = "America/New_York")
    public void generateAllW2OfficialFormsFor2025() {
        int currentYear = LocalDate.now().getYear();
        int targetYear = currentYear - 1; // W-2 –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥

        if (currentYear != 2026) {
            log.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é W-2. –¢–µ–∫—É—â–∏–π –≥–æ–¥: {}, –æ–∂–∏–¥–∞–µ–º: 2026", currentYear);
            return;
        }

        log.info("üìÑ W2FormScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º W-2 –∑–∞ {} –≤—Å–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º", targetYear);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏—è (—Ç.–µ. –æ–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏)
        List<User> workers = userRepository.findAll().stream()
                .filter(user -> user.getCompany() != null)
                .filter(user -> !user.isBusinessOwner()) // –∏—Å–∫–ª—é—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–∏–∑–Ω–µ—Å–∞
                .toList();


        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        Map<Company, List<User>> workersByCompany = new HashMap<>();

        for (User worker : workers) {
            try {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º W-2
                w2OfficialPDFService.generateFilledPdf(worker.getId(), worker.getCompany().getId(),  targetYear);
                log.info("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω W-2 –¥–ª—è workerId={} –∑–∞ {}", worker.getId(), targetYear);

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
                Company company = worker.getCompany();
                workersByCompany.computeIfAbsent(company, k -> new ArrayList<>()).add(worker);

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ W-2 –¥–ª—è workerId={}", worker.getId(), ex);
            }
        }

        for (Map.Entry<Company, List<User>> entry : workersByCompany.entrySet()) {
            Company company = entry.getKey();
            int count = entry.getValue().size();
            try {
                reportsMailSender.sendEmailW2Forms(company.getCompanyEmail());
                log.info("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ W-2 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–∏: {} (forms: {})",
                        company.getCompanyEmail(), count);
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {}",
                        company.getCompanyEmail(), e);
            }
        }

        log.info("üèÅ W2FormScheduler –∑–∞–≤–µ—Ä—à–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é W-2 –∑–∞ {}. –í—Å–µ–≥–æ: {} —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤",
                targetYear, workers.size());
    }





//-------- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
    //New methods

    @Scheduled(cron = "0 0 6 * * SUN", zone = "America/New_York")
    public void generateWeeklyPayrollReports() {
        log.info("üìä Weekly PayrollReportScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã");

        LocalDate endDate = LocalDate.now().minusDays(1);
        LocalDate startDate = endDate.minusDays(6);

        // –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ N+1
        List<WorkerPayroll> allWeeklyPayrolls = workerPayrollRepository
                .findAllByPeriodBetween(startDate, endDate);

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –≤ –ø–∞–º—è—Ç–∏
        Map<Company, List<WorkerPayroll>> payrollsByCompany = allWeeklyPayrolls.stream()
                .collect(Collectors.groupingBy(wp -> wp.getCompany()));

        // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å payrolls
        for (Map.Entry<Company, List<WorkerPayroll>> entry : payrollsByCompany.entrySet()) {
            Company company = entry.getKey();
            List<WorkerPayroll> companyPayrolls = entry.getValue();

            try {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
                PayrollSummaryReportDTO reportData = payrollSummaryDataService
                        .generatePayrollSummaryData(company.getId(), startDate, endDate);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                payrollSummaryReportService.generatePayrollSummaryReport(reportData);

                log.info("‚úÖ Weekly report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {})",
                        company.getCompanyName(), company.getId());

                reportsMailSender.sendEmailWeeklyPayrollReport(company.getCompanyEmail());

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ weekly report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}",
                        company.getId(), ex);
            }
        }

        log.info("üèÅ Weekly PayrollReportScheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {}",
                payrollsByCompany.size());
    }


    @Scheduled(cron = "0 0 7 1-7 * SUN", zone = "America/New_York")
    public void generateMonthlyPayrollReports() {
        log.info("üìä Monthly PayrollReportScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã");

        LocalDate today = LocalDate.now();
        LocalDate endDate = today.minusMonths(1).withDayOfMonth(
                today.minusMonths(1).lengthOfMonth()); // –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
        LocalDate startDate = endDate.withDayOfMonth(1); // –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {} - {}", startDate, endDate);

        // –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ N+1
        List<WorkerPayroll> allMonthlyPayrolls = workerPayrollRepository
                .findAllByPeriodBetween(startDate, endDate);

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        Map<Company, List<WorkerPayroll>> payrollsByCompany = allMonthlyPayrolls.stream()
                .collect(Collectors.groupingBy(WorkerPayroll::getCompany));

        int successCount = 0;
        int errorCount = 0;

        for (Map.Entry<Company, List<WorkerPayroll>> entry : payrollsByCompany.entrySet()) {
            Company company = entry.getKey();

            try {
                PayrollSummaryReportDTO reportData = payrollSummaryDataService
                        .generatePayrollSummaryData(company.getId(), startDate, endDate);

                payrollSummaryReportService.generatePayrollSummaryReport(reportData);

                reportsMailSender.sendEmailWeeklyPayrollReport(company.getCompanyEmail());

                log.info("‚úÖ Monthly report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {}/{}",
                        company.getCompanyName(), company.getId(),
                        startDate.getMonthValue(), startDate.getYear());

                successCount++;
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ monthly report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}",
                        company.getId(), ex);
                errorCount++;
            }
        }

        log.info("üèÅ Monthly PayrollReportScheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {}, —É—Å–ø–µ—à–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                payrollsByCompany.size(), successCount, errorCount);
    }



    @Scheduled(cron = "0 30 6 * * SUN", zone = "America/New_York")
    public void generateWeeklyHoursReports() {
        log.info("‚è∞ Weekly HoursReportScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ —á–∞—Å–∞–º");

        LocalDate endDate = LocalDate.now().minusDays(1); // —Å—É–±–±–æ—Ç–∞
        LocalDate startDate = endDate.minusDays(6); // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: {} - {}", startDate, endDate);

        // –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö attendance –∑–∞ –Ω–µ–¥–µ–ª—é
        List<WorkerAttendance> allWeeklyAttendances = attendanceRepository
                .findAllByCheckInTimeBetween(
                        startDate.atStartOfDay(),
                        endDate.atTime(23, 59, 59)
                );

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º —á–µ—Ä–µ–∑ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        Map<Company, List<WorkerAttendance>> attendancesByCompany = allWeeklyAttendances.stream()
                .collect(Collectors.groupingBy(att -> att.getWorker().getCompany()));

        int successCount = 0;
        int skipCount = 0;
        int errorCount = 0;

        for (Map.Entry<Company, List<WorkerAttendance>> entry : attendancesByCompany.entrySet()) {
            Company company = entry.getKey();
            List<WorkerAttendance> companyAttendances = entry.getValue();

            try {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —á–∞—Å–∞–º
                HoursReportDTO reportData = hoursReportDataService
                        .generateHoursReportData(company.getId(), startDate, endDate);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                hoursReportPdfService.generateHoursReport(reportData, company.getId());

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                reportsMailSender.sendEmailHoursReport(company.getCompanyEmail());

                log.info("‚úÖ Weekly hours report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}, attendances: {})",
                        company.getCompanyName(), company.getId(), companyAttendances.size());

                successCount++;
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ weekly hours report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}",
                        company.getId(), ex);
                errorCount++;
            }
        }

        long companiesWithoutAttendance = companyRepository.count() - attendancesByCompany.size();
        if (companiesWithoutAttendance > 0) {
            log.info("‚ÑπÔ∏è –ö–æ–º–ø–∞–Ω–∏–π –±–µ–∑ attendance –∑–∞ –Ω–µ–¥–µ–ª—é: {}", companiesWithoutAttendance);
        }

        log.info("üèÅ Weekly HoursReportScheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}, —É—Å–ø–µ—à–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                attendancesByCompany.size(), successCount, errorCount);
    }



    // ‚úÖ –ú–ï–°–Ø–ß–ù–´–ô HOURS REPORT (–∫–∞–∂–¥–æ–µ –ø–µ—Ä–≤–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –º–µ—Å—è—Ü–∞ –≤ 7:30 —É—Ç—Ä–∞)
    @Scheduled(cron = "0 30 7 1-7 * SUN", zone = "America/New_York")
    public void generateMonthlyHoursReports() {
        log.info("‚è∞ Monthly HoursReportScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ —á–∞—Å–∞–º");

        LocalDate today = LocalDate.now();
        LocalDate endDate = today.minusMonths(1).withDayOfMonth(
                today.minusMonths(1).lengthOfMonth());
        LocalDate startDate = endDate.withDayOfMonth(1);

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: {} - {}", startDate, endDate);

        // –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö attendance –∑–∞ –º–µ—Å—è—Ü
        List<WorkerAttendance> allMonthlyAttendances = attendanceRepository
                .findAllByCheckInTimeBetween(
                        startDate.atStartOfDay(),
                        endDate.atTime(23, 59, 59)
                );

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        Map<Company, List<WorkerAttendance>> attendancesByCompany = allMonthlyAttendances.stream()
                .collect(Collectors.groupingBy(att -> att.getWorker().getCompany()));

        int successCount = 0;
        int skipCount = 0;
        int errorCount = 0;

        for (Map.Entry<Company, List<WorkerAttendance>> entry : attendancesByCompany.entrySet()) {
            Company company = entry.getKey();
            List<WorkerAttendance> companyAttendances = entry.getValue();

            try {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                HoursReportDTO reportData = hoursReportDataService
                        .generateHoursReportData(company.getId(), startDate, endDate);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
                hoursReportPdfService.generateHoursReport(reportData, company.getId());

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                reportsMailSender.sendEmailHoursReport(company.getCompanyEmail());

                log.info("‚úÖ Monthly hours report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {}/{} (attendances: {})",
                        company.getCompanyName(), company.getId(),
                        startDate.getMonthValue(), startDate.getYear(),
                        companyAttendances.size());

                successCount++;
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ monthly hours report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}",
                        company.getId(), ex);
                errorCount++;
            }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –±–µ–∑ attendance
        long companiesWithoutAttendance = companyRepository.count() - attendancesByCompany.size();
        if (companiesWithoutAttendance > 0) {
            log.info("‚ÑπÔ∏è –ö–æ–º–ø–∞–Ω–∏–π –±–µ–∑ attendance –∑–∞ –º–µ—Å—è—Ü {}/{}: {}",
                    startDate.getMonthValue(), startDate.getYear(), companiesWithoutAttendance);
        }

        log.info("üèÅ Monthly HoursReportScheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}, —É—Å–ø–µ—à–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                attendancesByCompany.size(), successCount, errorCount);
    }


    @Scheduled(cron = "0 0 9 1 1,4,7,10 *", zone = "America/New_York")
    public void generateQuarterlyTaxSummaryReports() {
        log.info("üìã Quarterly TaxSummaryScheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º quarterly tax summary reports");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∞–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        int completedQuarter;
        if (currentMonth == 1) {        // 1 —è–Ω–≤–∞—Ä—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q4 –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
            completedQuarter = 4;
            currentYear = currentYear - 1;
        } else if (currentMonth == 4) { // 1 –∞–ø—Ä–µ–ª—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q1
            completedQuarter = 1;
        } else if (currentMonth == 7) { // 1 –∏—é–ª—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q2
            completedQuarter = 2;
        } else if (currentMonth == 10) { // 1 –æ–∫—Ç—è–±—Ä—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q3
            completedQuarter = 3;
        } else {
            log.info("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ quarterly scheduler. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {}", currentMonth);
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –∫–≤–∞—Ä—Ç–∞–ª–∞
        LocalDate startDate = LocalDate.of(currentYear, (completedQuarter - 1) * 3 + 1, 1);
        LocalDate endDate = startDate.plusMonths(3).minusDays(1);

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Tax Summary Reports –∑–∞ Q{} {} (–ø–µ—Ä–∏–æ–¥: {} - {})",
                completedQuarter, currentYear, startDate, endDate);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
        List<Company> allCompanies = companyRepository.findAll();

        int successCount = 0;
        int errorCount = 0;

        for (Company company : allCompanies) {
            try {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Tax Summary Report
                TaxSummaryReportDTO reportData = taxSummaryDataService
                        .generateTaxSummaryReport(company.getId(), startDate, endDate);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                taxSummaryPdfService.generateTaxSummaryReport(reportData);

                // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                reportsMailSender.sendEmailTaxSummaryReport(company.getCompanyEmail());
                log.info("‚úÖ Quarterly Tax Summary Report —Å–≥–µ–Ω–µ—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ Q{} {}",
                        company.getCompanyName(), company.getId(), completedQuarter, currentYear);

                successCount++;

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Tax Summary Report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ Q{} {}",
                        company.getId(), completedQuarter, currentYear, ex);
                errorCount++;
            }
        }

        log.info("üèÅ Quarterly TaxSummaryScheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ Q{} {}. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {}, —É—Å–ø–µ—à–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                completedQuarter, currentYear, allCompanies.size(), successCount, errorCount);
    }

// =============================================================================
// üìÖ MONTHLY CSV REPORTS
// =============================================================================

    @Scheduled(cron = "0 15 7 1-7 * SUN", zone = "America/New_York") // 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    public void generateMonthlyPayrollReportsCsv() {
        log.info("üìä Monthly PayrollReportCSV Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—ã–µ CSV –æ—Ç—á–µ—Ç—ã");

        LocalDate today = LocalDate.now();
        LocalDate endDate = today.minusMonths(1).withDayOfMonth(
                today.minusMonths(1).lengthOfMonth());
        LocalDate startDate = endDate.withDayOfMonth(1);

        // –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö payrolls –∑–∞ –º–µ—Å—è—Ü
        List<WorkerPayroll> allMonthlyPayrolls = workerPayrollRepository
                .findAllByPeriodBetween(startDate, endDate);

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        Map<Company, List<WorkerPayroll>> payrollsByCompany = allMonthlyPayrolls.stream()
                .collect(Collectors.groupingBy(WorkerPayroll::getCompany));

        int successCount = 0;
        int errorCount = 0;

        for (Map.Entry<Company, List<WorkerPayroll>> entry : payrollsByCompany.entrySet()) {
            Company company = entry.getKey();

            try {
                PayrollSummaryReportDTO reportData = payrollSummaryDataService
                        .generatePayrollSummaryData(company.getId(), startDate, endDate);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                payrollSummaryReportCsvService.generatePayrollSummaryReportCsv(reportData, company.getId());

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                reportsMailSender.sendEmailCSV(company.getCompanyEmail());

                log.info("‚úÖ Monthly CSV report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {}/{}",
                        company.getCompanyName(), company.getId(),
                        startDate.getMonthValue(), startDate.getYear());

                successCount++;
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ monthly CSV report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}",
                        company.getId(), ex);
                errorCount++;
            }
        }

        log.info("üèÅ Monthly PayrollReportCSV Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {}, —É—Å–ø–µ—à–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                payrollsByCompany.size(), successCount, errorCount);
    }


    @Scheduled(cron = "0 45 7 1-7 * SUN", zone = "America/New_York") // 45 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    public void generateMonthlyHoursReportsCsv() {
        log.info("‚è∞ Monthly HoursReportCSV Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—ã–µ CSV –æ—Ç—á–µ—Ç—ã –ø–æ —á–∞—Å–∞–º");

        LocalDate today = LocalDate.now();
        LocalDate endDate = today.minusMonths(1).withDayOfMonth(
                today.minusMonths(1).lengthOfMonth());
        LocalDate startDate = endDate.withDayOfMonth(1);

        // –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö attendance –∑–∞ –º–µ—Å—è—Ü
        List<WorkerAttendance> allMonthlyAttendances = attendanceRepository
                .findAllByCheckInTimeBetween(
                        startDate.atStartOfDay(),
                        endDate.atTime(23, 59, 59)
                );

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        Map<Company, List<WorkerAttendance>> attendancesByCompany = allMonthlyAttendances.stream()
                .collect(Collectors.groupingBy(att -> att.getWorker().getCompany()));

        int successCount = 0;
        int errorCount = 0;

        for (Map.Entry<Company, List<WorkerAttendance>> entry : attendancesByCompany.entrySet()) {
            Company company = entry.getKey();

            try {
                HoursReportDTO reportData = hoursReportDataService
                        .generateHoursReportData(company.getId(), startDate, endDate);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                hoursReportCsvService.generateHoursReportCsv(reportData, company.getId());

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                reportsMailSender.sendEmailCSV(company.getCompanyEmail());

                log.info("‚úÖ Monthly hours CSV report —Å–≥–µ–Ω–µ—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {}/{}",
                        company.getCompanyName(), company.getId(),
                        startDate.getMonthValue(), startDate.getYear());

                successCount++;
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ monthly hours CSV report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}",
                        company.getId(), ex);
                errorCount++;
            }
        }

        log.info("üèÅ Monthly HoursReportCSV Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {}, —É—Å–ø–µ—à–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                attendancesByCompany.size(), successCount, errorCount);
    }

// =============================================================================
// üìã QUARTERLY TAX SUMMARY CSV REPORTS
// =============================================================================

    @Scheduled(cron = "0 30 9 1 1,4,7,10 *", zone = "America/New_York") // 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    public void generateQuarterlyTaxSummaryReportsCsv() {
        log.info("üìã Quarterly TaxSummaryCSV Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º quarterly tax summary CSV reports");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∞–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        int completedQuarter;
        if (currentMonth == 1) {
            completedQuarter = 4;
            currentYear = currentYear - 1;
        } else if (currentMonth == 4) {
            completedQuarter = 1;
        } else if (currentMonth == 7) {
            completedQuarter = 2;
        } else if (currentMonth == 10) {
            completedQuarter = 3;
        } else {
            log.info("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ quarterly CSV scheduler. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {}", currentMonth);
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –∫–≤–∞—Ä—Ç–∞–ª–∞
        LocalDate startDate = LocalDate.of(currentYear, (completedQuarter - 1) * 3 + 1, 1);
        LocalDate endDate = startDate.plusMonths(3).minusDays(1);

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Tax Summary CSV Reports –∑–∞ Q{} {} (–ø–µ—Ä–∏–æ–¥: {} - {})",
                completedQuarter, currentYear, startDate, endDate);

        List<Company> allCompanies = companyRepository.findAll();

        int successCount = 0;
        int errorCount = 0;

        for (Company company : allCompanies) {
            try {
                TaxSummaryReportDTO reportData = taxSummaryDataService
                        .generateTaxSummaryReport(company.getId(), startDate, endDate);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                taxSummaryReportCsvService.generateTaxSummaryReportCsv(reportData, company.getId());

                // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                reportsMailSender.sendEmailCSV(company.getCompanyEmail());

                log.info("‚úÖ Quarterly Tax Summary CSV Report —Å–≥–µ–Ω–µ—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ Q{} {}",
                        company.getCompanyName(), company.getId(), completedQuarter, currentYear);

                successCount++;

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Tax Summary CSV Report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ Q{} {}",
                        company.getId(), completedQuarter, currentYear, ex);
                errorCount++;
            }
        }

        log.info("üèÅ Quarterly TaxSummaryCSV Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ Q{} {}. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {}, —É—Å–ø–µ—à–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                completedQuarter, currentYear, allCompanies.size(), successCount, errorCount);
    }

// üìã QUARTERLY E-FILE GENERATION (Form 941 & Schedule B)
// =============================================================================

    @Scheduled(cron = "0 0 10 15 1,4,7,10 *", zone = "America/New_York")
    public void generateQuarterlyForm941XmlFiles() {
        log.info("üìã Quarterly Form941XML Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º quarterly Form 941 XML files");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∞–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        int completedQuarter;
        if (currentMonth == 1) {
            completedQuarter = 4;
            currentYear = currentYear - 1;
        } else if (currentMonth == 4) {
            completedQuarter = 1;
        } else if (currentMonth == 7) {
            completedQuarter = 2;
        } else if (currentMonth == 10) {
            completedQuarter = 3;
        } else {
            log.info("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ quarterly Form941XML scheduler. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {}", currentMonth);
            return;
        }

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 941 XML files –∑–∞ Q{} {}", completedQuarter, currentYear);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å ADMIN
        Role adminRole = roleRepository.findByName("ADMIN")
                .orElseThrow(() -> new RuntimeException("Admin role not found"));

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é ADMIN
        List<User> allAdmins = userRepository.findAll().stream()
                .filter(user -> user.getRoles().contains(adminRole))
                .toList();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        Map<Integer, User> adminsByCompanyId = allAdmins.stream()
                .filter(admin -> admin.getCompany() != null)
                .collect(Collectors.toMap(
                        admin -> admin.getCompany().getId(),
                        admin -> admin,
                        (existing, replacement) -> existing
                ));

        List<Company> allCompanies = companyRepository.findAll();

        int successCount = 0;
        int skipCount = 0;
        int errorCount = 0;

        for (Company company : allCompanies) {
            try {
                User admin = adminsByCompanyId.get(company.getId());
                if (admin == null) {
                    log.warn("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Form 941 XML",
                            company.getCompanyName());
                    skipCount++;
                    continue;
                }

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 941 XML
                String form941Xml = form941XmlGenerator.generateForm941Xml(
                        admin.getId(), company.getId(), currentYear, completedQuarter);

                // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è Form 941
                reportsMailSender.sendEmailXMLReport(company.getCompanyEmail());

                log.info("‚úÖ Form 941 XML —Å–≥–µ–Ω–µ—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ Q{} {}",
                        company.getCompanyName(), company.getId(), completedQuarter, currentYear);

                successCount++;

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Form 941 XML –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ Q{} {}",
                        company.getId(), completedQuarter, currentYear, ex);
                errorCount++;
            }
        }

        log.info("üèÅ Quarterly Form941XML Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ Q{} {}. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}, —É—Å–ø–µ—à–Ω–æ: {}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                completedQuarter, currentYear, allCompanies.size(), successCount, skipCount, errorCount);
    }

    @Scheduled(cron = "0 30 10 15 1,4,7,10 *", zone = "America/New_York") // 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ Form 941
    public void generateQuarterlyForm941ScheduleBXmlFiles() {
        log.info("üìã Quarterly Form941ScheduleBXML Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º quarterly Form 941 Schedule B XML files");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∞–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        int completedQuarter;
        if (currentMonth == 1) {
            completedQuarter = 4;
            currentYear = currentYear - 1;
        } else if (currentMonth == 4) {
            completedQuarter = 1;
        } else if (currentMonth == 7) {
            completedQuarter = 2;
        } else if (currentMonth == 10) {
            completedQuarter = 3;
        } else {
            log.info("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ quarterly Form941ScheduleBXML scheduler. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {}", currentMonth);
            return;
        }

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 941 Schedule B XML files –∑–∞ Q{} {}", completedQuarter, currentYear);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å ADMIN
        Role adminRole = roleRepository.findByName("ADMIN")
                .orElseThrow(() -> new RuntimeException("Admin role not found"));

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é ADMIN
        List<User> allAdmins = userRepository.findAll().stream()
                .filter(user -> user.getRoles().contains(adminRole))
                .toList();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        Map<Integer, User> adminsByCompanyId = allAdmins.stream()
                .filter(admin -> admin.getCompany() != null)
                .collect(Collectors.toMap(
                        admin -> admin.getCompany().getId(),
                        admin -> admin,
                        (existing, replacement) -> existing
                ));

        List<Company> allCompanies = companyRepository.findAll();

        int successCount = 0;
        int skipCount = 0;
        int errorCount = 0;

        for (Company company : allCompanies) {
            try {
                User admin = adminsByCompanyId.get(company.getId());
                if (admin == null) {
                    log.warn("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Form 941 Schedule B XML",
                            company.getCompanyName());
                    skipCount++;
                    continue;
                }

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 941 Schedule B XML
                String form941ScheduleBXml = form941ScheduleBXmlGenerator.generateForm941ScheduleBXml(
                        admin.getId(), company.getId(), currentYear, completedQuarter);

                // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è Schedule B
                reportsMailSender.sendEmailXMLReport(company.getCompanyEmail());

                log.info("‚úÖ Form 941 Schedule B XML —Å–≥–µ–Ω–µ—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ Q{} {}",
                        company.getCompanyName(), company.getId(), completedQuarter, currentYear);

                successCount++;

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Form 941 Schedule B XML –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ Q{} {}",
                        company.getId(), completedQuarter, currentYear, ex);
                errorCount++;
            }
        }

        log.info("üèÅ Quarterly Form941ScheduleBXML Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ Q{} {}. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}, —É—Å–ø–µ—à–Ω–æ: {}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                completedQuarter, currentYear, allCompanies.size(), successCount, skipCount, errorCount);
    }
// =============================================================================
// üìÑ ANNUAL E-FILE GENERATION (EFW2)
// =============================================================================

    @Scheduled(cron = "0 0 11 31 1 *", zone = "America/New_York") // 31 —è–Ω–≤–∞—Ä—è –≤ 11:00 (deadline –¥–ª—è W-2)
    public void generateAnnualEFW2Files() {
        log.info("üìÑ Annual EFW2 Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º EFW2 files –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥");

        LocalDate today = LocalDate.now();
        int previousYear = today.getYear() - 1; // EFW2 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º EFW2 files –∑–∞ {} –≥–æ–¥", previousYear);

        List<Company> allCompanies = companyRepository.findAll();

        int successCount = 0;
        int skipCount = 0;
        int errorCount = 0;

        for (Company company : allCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ payrolls —É –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
                LocalDate yearStart = LocalDate.of(previousYear, 1, 1);
                LocalDate yearEnd = LocalDate.of(previousYear, 12, 31);

                boolean hasPayrollsInYear = workerPayrollRepository
                        .existsByCompanyIdAndPeriodStartGreaterThanEqualAndPeriodEndLessThanEqual(company.getId(), yearStart, yearEnd);

                if (hasPayrollsInYear) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º EFW2 —Ñ–∞–π–ª
                    byte[] efw2Content = efw2GeneratorService.generateEfw2File(company.getId(), previousYear);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                    reportsMailSender.sendEmailEFW2(company.getCompanyEmail());

                    log.info("‚úÖ EFW2 file —Å–≥–µ–Ω–µ—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {} –≥–æ–¥, —Ä–∞–∑–º–µ—Ä: {} bytes",
                            company.getCompanyName(), company.getId(), previousYear, efw2Content.length);

                    successCount++;
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç payrolls –≤ –∫–æ–º–ø–∞–Ω–∏–∏: {} –∑–∞ {} –≥–æ–¥", company.getCompanyName(), previousYear);
                    skipCount++;
                }

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ EFW2 file –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ {} –≥–æ–¥",
                        company.getId(), previousYear, ex);
                errorCount++;
            }
        }

        log.info("üèÅ Annual EFW2 Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} –≥–æ–¥. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}, —É—Å–ø–µ—à–Ω–æ: {}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                previousYear, allCompanies.size(), successCount, skipCount, errorCount);
    }


    @Scheduled(cron = "0 0 11 15 1 *", zone = "America/New_York")
    public void generateAnnualForm940AndScheduleA() {
        log.info("üìÑ Annual Form940 + Schedule A Scheduler –∑–∞–ø—É—â–µ–Ω");

        LocalDate today = LocalDate.now();
        int previousYear = today.getYear() - 1; // Form 940 –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 940 + Schedule A –∑–∞ {} –≥–æ–¥", previousYear);

        List<Company> allCompanies = companyRepository.findAll();

        int successCount = 0;
        int skipCount = 0;
        int errorCount = 0;

        for (Company company : allCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ payrolls —É –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
                LocalDate yearStart = LocalDate.of(previousYear, 1, 1);
                LocalDate yearEnd = LocalDate.of(previousYear, 12, 31);

                boolean hasPayrollsInYear = workerPayrollRepository
                        .existsByCompanyIdAndPeriodStartGreaterThanEqualAndPeriodEndLessThanEqual(company.getId(), yearStart, yearEnd);

                if (hasPayrollsInYear) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 940
                    form940PdfGeneratorService.generate940Pdf(company.getId(), previousYear);

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Schedule A
                    fillForm940SA.generateFilledPdf(company.getId(), previousYear);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                    reportsMailSender.sendEmail940FormAndScheduleA(
                            company.getCompanyEmail());

                    log.info("‚úÖ Form 940 + Schedule A —Å–≥–µ–Ω–µ—Ä–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è {} (ID: {}) –∑–∞ {} –≥–æ–¥",
                            company.getCompanyName(), company.getId(), previousYear);

                    successCount++;
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç payrolls –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {} –∑–∞ {} –≥–æ–¥",
                            company.getCompanyName(), previousYear);
                    skipCount++;
                }
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Form 940 + Schedule A –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ {} –≥–æ–¥",
                        company.getId(), previousYear, ex);
                errorCount++;
            }
        }

        log.info("üèÅ Annual Form940 + Schedule A Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} –≥–æ–¥. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}, —É—Å–ø–µ—à–Ω–æ: {}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                previousYear, allCompanies.size(), successCount, skipCount, errorCount);
    }


    @Scheduled(cron = "0 0 12 31 1 *", zone = "America/New_York") // 31 —è–Ω–≤–∞—Ä—è –≤ 12:00 (–ø–æ—Å–ª–µ PDF)
    public void generateAnnualForm940XmlFiles() {
        log.info("üìÑ Annual Form940XML Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 940 XML e-files –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥");

        LocalDate today = LocalDate.now();
        int previousYear = today.getYear() - 1; // Form 940 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 940 XML e-files –∑–∞ {} –≥–æ–¥", previousYear);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å ADMIN
        Role adminRole = roleRepository.findByName("ADMIN")
                .orElseThrow(() -> new RuntimeException("Admin role not found"));

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        List<User> allAdmins = userRepository.findAll().stream()
                .filter(user -> user.getRoles().contains(adminRole))
                .toList();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        Map<Integer, User> adminsByCompanyId = allAdmins.stream()
                .filter(admin -> admin.getCompany() != null)
                .collect(Collectors.toMap(
                        admin -> admin.getCompany().getId(),
                        admin -> admin,
                        (existing, replacement) -> existing
                ));

        List<Company> allCompanies = companyRepository.findAll();

        int successCount = 0;
        int skipCount = 0;
        int errorCount = 0;

        for (Company company : allCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≥–æ–¥
                LocalDate yearStart = LocalDate.of(previousYear, 1, 1);
                LocalDate yearEnd = LocalDate.of(previousYear, 12, 31);

                boolean hasPayrollsInYear = workerPayrollRepository
                        .existsByCompanyIdAndPeriodStartGreaterThanEqualAndPeriodEndLessThanEqual(company.getId(), yearStart, yearEnd);

                if (!hasPayrollsInYear) {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç payrolls –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {} –∑–∞ {} –≥–æ–¥",
                            company.getCompanyName(), previousYear);
                    skipCount++;
                    continue;
                }

                // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏
                User admin = adminsByCompanyId.get(company.getId());
                if (admin == null) {
                    log.warn("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Form 940 XML",
                            company.getCompanyName());
                    skipCount++;
                    continue;
                }

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 940 XML e-file
                String form940Xml = form940XmlGenerator.generateForm940Xml(
                        admin.getId(), company.getId(), previousYear);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                reportsMailSender.sendEmail940Form(company.getCompanyEmail());

                log.info("‚úÖ Form 940 XML e-file —Å–≥–µ–Ω–µ—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {} –≥–æ–¥",
                        company.getCompanyName(), company.getId(), previousYear);

                successCount++;

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Form 940 XML –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ {} –≥–æ–¥",
                        company.getId(), previousYear, ex);
                errorCount++;
            }
        }

        log.info("üèÅ Annual Form940XML Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} –≥–æ–¥. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}, —É—Å–ø–µ—à–Ω–æ: {}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                previousYear, allCompanies.size(), successCount, skipCount, errorCount);
    }


    @Scheduled(cron = "0 30 12 31 1 *", zone = "America/New_York") // 31 —è–Ω–≤–∞—Ä—è –≤ 12:30 (–ø–æ—Å–ª–µ Form 940 XML)
    public void generateAnnualForm940ScheduleAXmlFiles() {
        log.info("üìÑ Annual Form940ScheduleAXML Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º Schedule A XML e-files –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥");

        LocalDate today = LocalDate.now();
        int previousYear = today.getYear() - 1;

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Form 940 Schedule A XML e-files –∑–∞ {} –≥–æ–¥", previousYear);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å ADMIN
        Role adminRole = roleRepository.findByName("ADMIN")
                .orElseThrow(() -> new RuntimeException("Admin role not found"));

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        List<User> allAdmins = userRepository.findAll().stream()
                .filter(user -> user.getRoles().contains(adminRole))
                .toList();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        Map<Integer, User> adminsByCompanyId = allAdmins.stream()
                .filter(admin -> admin.getCompany() != null)
                .collect(Collectors.toMap(
                        admin -> admin.getCompany().getId(),
                        admin -> admin,
                        (existing, replacement) -> existing
                ));

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ NY –∫–æ–º–ø–∞–Ω–∏–∏
        List<Company> nyCompanies = companyRepository.findAll().stream()
                .filter(company -> "NY".equals(company.getCompanyState()))
                .toList();

        int successCount = 0;
        int skipCount = 0;
        int errorCount = 0;
        int notNyCount = companyRepository.findAll().size() - nyCompanies.size();

        for (Company company : nyCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≥–æ–¥
                LocalDate yearStart = LocalDate.of(previousYear, 1, 1);
                LocalDate yearEnd = LocalDate.of(previousYear, 12, 31);

                boolean hasPayrollsInYear = workerPayrollRepository
                        .existsByCompanyIdAndPeriodStartGreaterThanEqualAndPeriodEndLessThanEqual(company.getId(), yearStart, yearEnd);

                if (!hasPayrollsInYear) {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç payrolls –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {} –∑–∞ {} –≥–æ–¥",
                            company.getCompanyName(), previousYear);
                    skipCount++;
                    continue;
                }

                // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏
                User admin = adminsByCompanyId.get(company.getId());
                if (admin == null) {
                    log.warn("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Schedule A XML",
                            company.getCompanyName());
                    skipCount++;
                    continue;
                }

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Schedule A XML e-file
                String scheduleAXml = generateForm940ScheduleAXml.generateForm940ScheduleAXml(
                        admin.getId(), company.getId(), previousYear);

                if (!scheduleAXml.isEmpty()) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                    reportsMailSender.sendEmail940FormAndScheduleA(company.getCompanyEmail());

                    log.info("‚úÖ Form 940 Schedule A XML e-file —Å–≥–µ–Ω–µ—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {} –≥–æ–¥",
                            company.getCompanyName(), company.getId(), previousYear);
                    successCount++;
                } else {
                    log.info("‚ÑπÔ∏è Schedule A XML –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {}", company.getCompanyName());
                    skipCount++;
                }

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Schedule A XML –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ {} –≥–æ–¥",
                        company.getId(), previousYear, ex);
                errorCount++;
            }
        }

        log.info("üèÅ Annual Form940ScheduleAXML Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} –≥–æ–¥. " +
                        "NY –∫–æ–º–ø–∞–Ω–∏–∏: {}, —É—Å–ø–µ—à–Ω–æ: {}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}, –Ω–µ-NY –∫–æ–º–ø–∞–Ω–∏–∏: {}",
                previousYear, nyCompanies.size(), successCount, skipCount, errorCount, notNyCount);
    }


    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ FUTA –æ—Ç—á–µ—Ç—ã
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 15 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ (—è–Ω–≤, –∞–ø—Ä, –∏—é–ª—å, –æ–∫—Ç) –≤ 8:00
     */
    @Scheduled(cron = "0 0 8 15 1,4,7,10 *", zone = "America/New_York")
    public void generateQuarterlyFutaReports() {
        log.info("üìã Quarterly FUTA Report Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º quarterly FUTA reports");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∞–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        int completedQuarter;
        if (currentMonth == 1) {        // 15 —è–Ω–≤–∞—Ä—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q4 –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
            completedQuarter = 4;
            currentYear = currentYear - 1;
        } else if (currentMonth == 4) { // 15 –∞–ø—Ä–µ–ª—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q1
            completedQuarter = 1;
        } else if (currentMonth == 7) { // 15 –∏—é–ª—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q2
            completedQuarter = 2;
        } else if (currentMonth == 10) { // 15 –æ–∫—Ç—è–±—Ä—è - –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Q3
            completedQuarter = 3;
        } else {
            log.info("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ quarterly FUTA scheduler. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {}", currentMonth);
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –∫–≤–∞—Ä—Ç–∞–ª–∞
        LocalDate startDate = LocalDate.of(currentYear, (completedQuarter - 1) * 3 + 1, 1);
        LocalDate endDate = startDate.plusMonths(3).minusDays(1);

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º FUTA Reports –∑–∞ Q{} {} (–ø–µ—Ä–∏–æ–¥: {} - {})",
                completedQuarter, currentYear, startDate, endDate);

        List<Company> allCompanies = companyRepository.findAll();

        int successCount = 0;
        int skipCount = 0;
        int errorCount = 0;

        for (Company company : allCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ payrolls –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª
                boolean hasPayrollsInQuarter = workerPayrollRepository
                        .existsByCompanyIdAndPeriodStartGreaterThanEqualAndPeriodEndLessThanEqual(company.getId(), startDate, endDate);

                if (hasPayrollsInQuarter) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π FUTA –æ—Ç—á–µ—Ç
                    FutaReportDTO reportData = futaReportService.generateQuarterlyFutaReport(
                            company.getId(), currentYear, completedQuarter);

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                    byte[] pdfBytes = futaReportPdfService.generateFutaReportPdf(reportData);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                    reportsMailSender.sendEmailQuarterFUTAReport(
                            company.getCompanyEmail());

                    log.info("‚úÖ Quarterly FUTA Report —Å–≥–µ–Ω–µ—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ Q{} {}, —Ä–∞–∑–º–µ—Ä PDF: {} bytes",
                            company.getCompanyName(), company.getId(), completedQuarter, currentYear, pdfBytes.length);

                    successCount++;
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç payrolls –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} –∑–∞ Q{} {}",
                            company.getCompanyName(), completedQuarter, currentYear);
                    skipCount++;
                }

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ quarterly FUTA report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ Q{} {}",
                        company.getId(), completedQuarter, currentYear, ex);
                errorCount++;
            }
        }

        log.info("üèÅ Quarterly FUTA Report Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ Q{} {}. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}, —É—Å–ø–µ—à–Ω–æ: {}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                completedQuarter, currentYear, allCompanies.size(), successCount, skipCount, errorCount);
    }

// =============================================================================
// üìã ANNUAL FUTA REPORTS
// =============================================================================

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ–¥–æ–≤—ã–µ FUTA –æ—Ç—á–µ—Ç—ã
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 15 —è–Ω–≤–∞—Ä—è –≤ 9:00 —É—Ç—Ä–∞ (–¥–µ–¥–ª–∞–π–Ω –¥–ª—è Form 940)
     */
    @Scheduled(cron = "0 0 9 15 1 *", zone = "America/New_York")
    public void generateAnnualFutaReports() {
        log.info("üìÑ Annual FUTA Report Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º annual FUTA reports –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥");

        LocalDate today = LocalDate.now();
        int previousYear = today.getYear() - 1; // –ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Annual FUTA Reports –∑–∞ {} –≥–æ–¥", previousYear);

        // –î–∞—Ç—ã –∑–∞ –≤–µ—Å—å –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
        LocalDate yearStart = LocalDate.of(previousYear, 1, 1);
        LocalDate yearEnd = LocalDate.of(previousYear, 12, 31);

        List<Company> allCompanies = companyRepository.findAll();

        int successCount = 0;
        int skipCount = 0;
        int errorCount = 0;

        for (Company company : allCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ payrolls –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
                boolean hasPayrollsInYear = workerPayrollRepository
                        .existsByCompanyIdAndPeriodStartGreaterThanEqualAndPeriodEndLessThanEqual(company.getId(), yearStart, yearEnd);

                if (hasPayrollsInYear) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–¥–æ–≤–æ–π FUTA –æ—Ç—á–µ—Ç
                    FutaReportDTO reportData = futaReportService.generateAnnualFutaReport(
                            company.getId(), previousYear);

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                    byte[] pdfBytes = futaReportPdfService.generateFutaReportPdf(reportData);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                    reportsMailSender.sendEmailAnnualFutaReport(
                            company.getCompanyEmail());

                    log.info("‚úÖ Annual FUTA Report —Å–≥–µ–Ω–µ—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {} –≥–æ–¥, —Ä–∞–∑–º–µ—Ä PDF: {} bytes",
                            company.getCompanyName(), company.getId(), previousYear, pdfBytes.length);

                    successCount++;
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç payrolls –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} –∑–∞ {} –≥–æ–¥",
                            company.getCompanyName(), previousYear);
                    skipCount++;
                }

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ annual FUTA report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ {} –≥–æ–¥",
                        company.getId(), previousYear, ex);
                errorCount++;
            }
        }

        log.info("üèÅ Annual FUTA Report Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} –≥–æ–¥. " +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}, —É—Å–ø–µ—à–Ω–æ: {}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}",
                previousYear, allCompanies.size(), successCount, skipCount, errorCount);
    }

// =============================================================================
// üìã QUARTERLY FUTA COMPLIANCE CHECK
// =============================================================================

    @Scheduled(cron = "0 0 6 * * MON", zone = "America/New_York")
    public void checkQuarterlyFutaCompliance() {
        log.info("‚ö†Ô∏è FUTA Compliance Check Scheduler –∑–∞–ø—É—â–µ–Ω: –ø—Ä–æ–≤–µ—Ä—è–µ–º compliance –∏ –¥–µ–¥–ª–∞–π–Ω—ã");

        LocalDate today = LocalDate.now();
        int currentMonth = today.getMonthValue();
        int currentYear = today.getYear();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª –∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–¥–ª–∞–π–Ω
        int currentQuarter;
        LocalDate nextDeadline;

        if (currentMonth >= 1 && currentMonth <= 3) {
            currentQuarter = 1;
            nextDeadline = LocalDate.of(currentYear, 4, 30); // Q1 deadline
        } else if (currentMonth >= 4 && currentMonth <= 6) {
            currentQuarter = 2;
            nextDeadline = LocalDate.of(currentYear, 7, 31); // Q2 deadline
        } else if (currentMonth >= 7 && currentMonth <= 9) {
            currentQuarter = 3;
            nextDeadline = LocalDate.of(currentYear, 10, 31); // Q3 deadline
        } else {
            currentQuarter = 4;
            nextDeadline = LocalDate.of(currentYear + 1, 1, 31); // Q4 deadline
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 2 –Ω–µ–¥–µ–ª—å
        long daysUntilDeadline = today.until(nextDeadline).getDays();

        if (daysUntilDeadline <= 14 && daysUntilDeadline > 0) {
            log.info("‚ö†Ô∏è –î–æ FUTA –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {} –¥–Ω–µ–π. –ü—Ä–æ–≤–µ—Ä—è–µ–º compliance –¥–ª—è Q{} {}",
                    daysUntilDeadline, currentQuarter, currentYear);

            // –î–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞
            LocalDate quarterStart = LocalDate.of(currentYear, (currentQuarter - 1) * 3 + 1, 1);
            LocalDate quarterEnd = quarterStart.plusMonths(3).minusDays(1);

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å payrolls –≤ —Ç–µ–∫—É—â–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ
            List<Company> companiesWithPayrolls = companyRepository.findAll().stream()
                    .filter(company -> workerPayrollRepository
                            .existsByCompanyIdAndPeriodStartGreaterThanEqualAndPeriodEndLessThanEqual(company.getId(), quarterStart, quarterEnd))
                    .toList();

            int totalCompanies = companiesWithPayrolls.size();
            int complianceIssues = 0;
            int checkErrors = 0;

            for (Company company : companiesWithPayrolls) {
                try {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    FutaReportDTO currentReport = futaReportService.generateQuarterlyFutaReport(
                            company.getId(), currentYear, currentQuarter);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º compliance
                    if (!currentReport.getComplianceStatus() || currentReport.getNeedsPayment()) {
                        complianceIssues++;

                        log.warn("‚ö†Ô∏è COMPLIANCE ALERT: –ö–æ–º–ø–∞–Ω–∏—è {} (ID: {}) —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –ø–æ FUTA –∑–∞ Q{} {}. " +
                                        "Compliance: {}, Needs Payment: {}, Remaining Liability: ${}",
                                company.getCompanyName(), company.getId(), currentQuarter, currentYear,
                                currentReport.getComplianceStatus(), currentReport.getNeedsPayment(),
                                currentReport.getRemainingFutaLiability());

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        reportsMailSender.sendEmailFutaCompliance(company.getCompanyEmail());
                    }

                } catch (Exception ex) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ FUTA compliance –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}", company.getId(), ex);
                    checkErrors++;
                }
            }

            log.info("üìä FUTA Compliance Check Summary: –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {}, –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {}, –û—à–∏–±–æ–∫: {}",
                    totalCompanies, complianceIssues, checkErrors);

        } else if (daysUntilDeadline <= 0) {
            log.warn("üö® FUTA –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ {} –¥–Ω–µ–π!", Math.abs(daysUntilDeadline));

            // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–æ–º–ø–∞–Ω–∏—è–º —Å –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏

        } else {
            log.info("‚úÖ –î–æ FUTA –¥–µ–¥–ª–∞–π–Ω–∞ –µ—â–µ {} –¥–Ω–µ–π. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.", daysUntilDeadline);
        }

        log.info("üèÅ FUTA Compliance Check –∑–∞–≤–µ—Ä—à–µ–Ω");
    }
// =============================================================================
// üìã FUTA YEAR-END PREPARATION
// =============================================================================

    /**
     * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫ –∫–æ–Ω—Ü—É –≥–æ–¥–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã)
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 15 –¥–µ–∫–∞–±—Ä—è –≤ 10:00 —É—Ç—Ä–∞
     */

    @Scheduled(cron = "0 0 10 15 12 *", zone = "America/New_York")
    public void prepareFutaYearEndReports() {
        log.info("üìã FUTA Year-End Preparation Scheduler –∑–∞–ø—É—â–µ–Ω: –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫ –∫–æ–Ω—Ü—É –≥–æ–¥–∞");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();

        log.info("üìÖ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º FUTA –¥–∞–Ω–Ω—ã–µ –∑–∞ {} –≥–æ–¥ –∫ –∫–æ–Ω—Ü—É –≥–æ–¥–∞", currentYear);

        // –î–∞—Ç—ã –≤—Å–µ–≥–æ –≥–æ–¥–∞
        LocalDate yearStart = LocalDate.of(currentYear, 1, 1);
        LocalDate yearEnd = LocalDate.of(currentYear, 12, 31);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å payrolls –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É
        List<Company> companiesWithPayrolls = companyRepository.findAll().stream()
                .filter(company -> workerPayrollRepository
                        .existsByCompanyIdAndPeriodStartGreaterThanEqualAndPeriodEndLessThanEqual(company.getId(), yearStart, yearEnd))
                .toList();

        int totalCompanies = companiesWithPayrolls.size();
        int companiesWithIssues = 0;
        int perfectCompliance = 0;
        int checkErrors = 0;

        for (Company company : companiesWithPayrolls) {
            try {
                log.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ FUTA –æ—Ç—á–µ—Ç—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {})",
                        company.getCompanyName(), company.getId());

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ 4 –∫–≤–∞—Ä—Ç–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
                BigDecimal totalAnnualLiability = BigDecimal.ZERO;
                BigDecimal totalAnnualPaid = BigDecimal.ZERO;
                List<String> missingQuarters = new ArrayList<>();
                boolean hasAnyIssues = false;

                for (int quarter = 1; quarter <= 4; quarter++) {
                    try {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª
                        LocalDate quarterStart = LocalDate.of(currentYear, (quarter - 1) * 3 + 1, 1);
                        LocalDate quarterEnd = quarterStart.plusMonths(3).minusDays(1);

                        if (workerPayrollRepository.existsByCompanyIdAndPeriodStartGreaterThanEqualAndPeriodEndLessThanEqual(
                                company.getId(), quarterStart, quarterEnd)) {

                            FutaReportDTO quarterlyReport = futaReportService.generateQuarterlyFutaReport(
                                    company.getId(), currentYear, quarter);

                            totalAnnualLiability = totalAnnualLiability.add(quarterlyReport.getTotalFutaTaxOwed());
                            totalAnnualPaid = totalAnnualPaid.add(quarterlyReport.getTotalFutaTaxPaid());

                            if (!quarterlyReport.getComplianceStatus()) {
                                missingQuarters.add("Q" + quarter);
                                hasAnyIssues = true;
                            }

                            log.info("‚úÖ Q{} {}: Owed=${}, Paid=${}, Compliant={}",
                                    quarter, currentYear,
                                    quarterlyReport.getTotalFutaTaxOwed(),
                                    quarterlyReport.getTotalFutaTaxPaid(),
                                    quarterlyReport.getComplianceStatus());
                        }

                    } catch (Exception ex) {
                        log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Q{} –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {}", quarter, company.getId(), ex);
                        missingQuarters.add("Q" + quarter + " (ERROR)");
                        hasAnyIssues = true;
                    }
                }

                // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
                BigDecimal remainingLiability = totalAnnualLiability.subtract(totalAnnualPaid);

                log.info("üìä –ò—Ç–æ–≥–∏ {} –≥–æ–¥–∞ –¥–ª—è {}: Total Owed=${}, Total Paid=${}, Remaining=${}, Issues={}",
                        currentYear, company.getCompanyName(),
                        totalAnnualLiability, totalAnnualPaid, remainingLiability,
                        missingQuarters.isEmpty() ? "None" : String.join(", ", missingQuarters));

                if (!missingQuarters.isEmpty() || remainingLiability.compareTo(BigDecimal.ONE) > 0) {
                    companiesWithIssues++;
                    hasAnyIssues = true;

                    log.warn("‚ö†Ô∏è YEAR-END ALERT: –ö–æ–º–ø–∞–Ω–∏—è {} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ü–æ–º –≥–æ–¥–∞. " +
                                    "–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–≤–∞—Ä—Ç–∞–ª—ã: {}, Remaining Liability: ${}",
                            company.getCompanyName(),
                            missingQuarters.isEmpty() ? "None" : String.join(", ", missingQuarters),
                            remainingLiability);

                    // –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    reportsMailSender.sendEmailAnnualFutaReport(
                            company.getCompanyEmail());
                }

                if (!hasAnyIssues) {
                    perfectCompliance++;
                }

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ year-end preparation –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {}", company.getId(), ex);
                checkErrors++;
            }
        }

        log.info("üèÅ FUTA Year-End Preparation –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {} –≥–æ–¥. " +
                        "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {}, –° –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {}, –ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {}, –û—à–∏–±–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏: {}",
                currentYear, totalCompanies, companiesWithIssues, perfectCompliance, checkErrors);
    }



    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ SUTA –æ—Ç—á–µ—Ç—ã
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 20 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 9:00 (–ø–æ—Å–ª–µ FUTA)
     */
    @Scheduled(cron = "0 0 9 20 1,4,7,10 *", zone = "America/New_York")
    public void generateQuarterlySutaReports() {
        log.info("üìã Quarterly SUTA Report Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º quarterly SUTA reports");

        LocalDate today = LocalDate.now();
        int currentYear = today.getYear();
        int currentMonth = today.getMonthValue();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∞–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        int completedQuarter;
        if (currentMonth == 1) {
            completedQuarter = 4;
            currentYear = currentYear - 1;
        } else if (currentMonth == 4) {
            completedQuarter = 1;
        } else if (currentMonth == 7) {
            completedQuarter = 2;
        } else if (currentMonth == 10) {
            completedQuarter = 3;
        } else {
            log.info("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ quarterly SUTA scheduler. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {}", currentMonth);
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –∫–≤–∞—Ä—Ç–∞–ª–∞
        LocalDate startDate = LocalDate.of(currentYear, (completedQuarter - 1) * 3 + 1, 1);
        LocalDate endDate = startDate.plusMonths(3).minusDays(1);

        log.info("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SUTA Reports –∑–∞ Q{} {} (–ø–µ—Ä–∏–æ–¥: {} - {})",
                completedQuarter, currentYear, startDate, endDate);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ NY –∫–æ–º–ø–∞–Ω–∏–∏
        List<Company> nyCompanies = companyRepository.findAll().stream()
                .filter(company -> "NY".equals(company.getCompanyState()))
                .toList();

        int totalNyCompanies = nyCompanies.size();
        int successCount = 0;
        int skipCount = 0;
        int errorCount = 0;

        for (Company company : nyCompanies) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ payrolls –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª
                boolean hasPayrollsInQuarter = workerPayrollRepository
                        .existsByCompanyIdAndPeriodStartGreaterThanEqualAndPeriodEndLessThanEqual(company.getId(), startDate, endDate);

                if (hasPayrollsInQuarter) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π SUTA –æ—Ç—á–µ—Ç
                    SutaReportDTO reportData = sutaReportService.generateQuarterlySutaReport(
                            company.getId(), currentYear, completedQuarter);

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3
                    byte[] pdfBytes = sutaReportPdfService.generateSutaReportPdf(reportData);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                    reportsMailSender.sendEmailQuarterSutaForm(
                            company.getCompanyEmail()
                    );

                    log.info("‚úÖ Quarterly SUTA Report —Å–≥–µ–Ω–µ—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ Q{} {}, —Ä–∞–∑–º–µ—Ä PDF: {} bytes",
                            company.getCompanyName(), company.getId(), completedQuarter, currentYear, pdfBytes.length);

                    successCount++;
                } else {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç payrolls –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} –∑–∞ Q{} {}",
                            company.getCompanyName(), completedQuarter, currentYear);
                    skipCount++;
                }

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ quarterly SUTA report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ Q{} {}",
                        company.getId(), completedQuarter, currentYear, ex);
                errorCount++;
            }
        }

        long notNyCompanies = companyRepository.count() - totalNyCompanies;

        log.info("üèÅ Quarterly SUTA Report Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ Q{} {}. " +
                        "NY –∫–æ–º–ø–∞–Ω–∏–∏: {}, —É—Å–ø–µ—à–Ω–æ: {}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {}, —Å –æ—à–∏–±–∫–∞–º–∏: {}, –Ω–µ-NY –∫–æ–º–ø–∞–Ω–∏–∏: {}",
                completedQuarter, currentYear, totalNyCompanies, successCount, skipCount, errorCount, notNyCompanies);
    }
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ–¥–æ–≤—ã–µ SUTA –æ—Ç—á–µ—Ç—ã
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 15 —è–Ω–≤–∞—Ä—è –≤ 10:00 —É—Ç—Ä–∞ (–ø–æ—Å–ª–µ FUTA, –¥–µ–¥–ª–∞–π–Ω –¥–ª—è NYS-45)
     */
    @Scheduled(cron = "0 0 10 15 1 *", zone = "America/New_York")
    public void generateAnnualSutaReports() {
        log.info("üìÑ Annual SUTA Report Scheduler –∑–∞–ø—É—â–µ–Ω: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º annual SUTA reports –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥");

        LocalDate today = LocalDate.now();
        int previousYear = today.getYear() - 1;

        // 1. –ë–µ—Ä—ë–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
        List<Company> companies = companyRepository.findAll();
        if (companies.isEmpty()) {
            log.info("‚ÑπÔ∏è –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
            return;
        }

        // 2. –°–æ–±–∏—Ä–∞–µ–º –∏—Ö ID –∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        List<Integer> companyIds = companies.stream()
                .map(Company::getId)
                .toList();
        List<User> allEmployees = userRepository.findAllByCompanyIdIn(companyIds);

        // 3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
        Map<Integer, List<User>> employeesByCompany = allEmployees.stream()
                .collect(Collectors.groupingBy(u -> u.getCompany().getId()));

        // 4. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        for (Company company : companies) {
            try {
                List<User> employees = employeesByCompany
                        .getOrDefault(company.getId(), Collections.emptyList());

                if (employees.isEmpty()) {
                    log.info("‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–ø–∞–Ω–∏–∏: {} –∑–∞ {} –≥–æ–¥",
                            company.getCompanyName(), previousYear);
                    continue;
                }

                // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤ S3
                SutaReportDTO reportData = sutaReportService
                        .generateAnnualSutaReport(company.getId(), previousYear);
                byte[] pdfBytes = sutaReportPdfService
                        .generateSutaReportPdf(reportData);

                log.info("‚úÖ Annual SUTA Report —Å–≥–µ–Ω–µ—Ä–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {} (ID: {}) –∑–∞ {} –≥–æ–¥, —Ä–∞–∑–º–µ—Ä PDF: {} bytes",
                        company.getCompanyName(), company.getId(), previousYear, pdfBytes.length);

                // 6. –ò —Å—Ä–∞–∑—É —à–ª—ë–º –ø–∏—Å—å–º–æ, –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
                reportsMailSender.sendAnnualSUTAReport(company.getCompanyEmail());
                log.info("üìß Email —Å Annual SUTA Report –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–ø–∞–Ω–∏–∏: {}", company.getCompanyEmail());

            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ annual SUTA report –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID: {} –∑–∞ {} –≥–æ–¥",
                        company.getId(), previousYear, ex);
            }
        }

        log.info("üèÅ Annual SUTA Report Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} –≥–æ–¥", previousYear);
    }











    private boolean shouldCreateEmployerTaxRecord(WorkerPayroll payroll, Company company) {
        if (payroll == null || company == null || company.getCompanyPaymentPosition() == null) {
            return false;
        }

        return LocalDate.now().isEqual(payroll.getPeriodEnd());
    }




    private List<User> getCompanyAdmins(Integer companyId) {
        try {
            // –ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ —Å —Ä–æ–ª—è–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            return userRepository.findAllByCompanyIdAndRole(companyId, "ADMIN");
        } catch (Exception e) {
            return userRepository.findAllByCompanyId(companyId).stream()
                    .filter(user -> {

                        return user.getRoles() != null && user.getRoles().stream()
                                .anyMatch(role -> "ADMIN".equals(role.getName()));
                    })
                    .toList();
        }

    }

}
