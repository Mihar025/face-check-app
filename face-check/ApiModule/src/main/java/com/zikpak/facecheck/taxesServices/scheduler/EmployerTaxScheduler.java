package com.zikpak.facecheck.taxesServices.scheduler;


import com.zikpak.facecheck.entity.employee.WorkerPayroll;
import com.zikpak.facecheck.repository.WorkerPayrollRepository;
import com.zikpak.facecheck.taxesServices.services.EmployerTaxService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class EmployerTaxScheduler {

    private final WorkerPayrollRepository workerPayrollRepository;
    private final EmployerTaxService employerTaxService;

    @Scheduled(cron = "0 0 4 * * SUN") // –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 4:00 —É—Ç—Ä–∞
    // @Scheduled(fixedDelay = 10000) // –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    public void calculateWeeklyEmployerTaxes() {
        log.info("üßÆ Scheduler –∑–∞–ø—É—â–µ–Ω: –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç –Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö payroll'–æ–≤");

        List<WorkerPayroll> payrolls = workerPayrollRepository
                .findAllByPeriodEnd(LocalDate.now().minusDays(1)) // –≤—á–µ—Ä–∞ –±—ã–ª–∞ —Å—É–±–±–æ—Ç–∞
                .stream()
                .filter(p -> !p.isEmployerTaxesCalculated())
                .toList();

        for (WorkerPayroll payroll : payrolls) {
            try {
                employerTaxService.calculateAndSaveEmployerTaxes(payroll);
                payroll.setEmployerTaxesCalculated(true);
                workerPayrollRepository.save(payroll);
                log.info("‚úÖ –†–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è payroll ID: {}", payroll.getId());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è payroll ID: {}", payroll.getId(), e);
            }
        }

        log.info("üèÅ Scheduler –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    }

}
